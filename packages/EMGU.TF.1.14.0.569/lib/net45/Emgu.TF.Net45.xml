<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Emgu.TF.Net45</name>
    </assembly>
    <members>
        <member name="T:Emgu.TF.AttrMetadata">
            <summary>
            Describes the value of an attribute on an operation.
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrMetadata.IsList">
            <summary>
            True if the attribute value is a list, false otherwise.
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrMetadata.ListSize">
            <summary>
            Length of the list if is_list is true. Undefined otherwise.
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrMetadata.Type">
            <summary>
            Type of elements of the list if is_list != 0.
            Type of the single value stored in the attribute if is_list == 0.
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrMetadata.TotalSize">
            <summary>
            Total size the attribute value.
            The units of total_size depend on is_list and type.
            (1) If type == TF_ATTR_STRING and is_list == 0
                then total_size is the byte size of the string
                valued attribute.
            (2) If type == TF_ATTR_STRING and is_list == 1
                then total_size is the cumulative byte size
                of all the strings in the list.
            (3) If type == TF_ATTR_SHAPE and is_list == 0
                then total_size is the number of dimensions
                of the shape valued attribute, or -1
                if its rank is unknown.
            (4) If type == TF_ATTR_SHAPE and is_list == 1
                then total_size is the cumulative number
                of dimensions of all shapes in the list.
            (5) Otherwise, total_size is undefined.
            </summary>
        </member>
        <member name="T:Emgu.TF.AttrType">
            <summary>
            Describes the type of the value of an attribute on an operation.
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Int">
            <summary>
            int
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Float">
            <summary>
            float
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Bool">
            <summary>
            bool
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Type">
            <summary>
            type
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Shape">
            <summary>
            shape
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Tensor">
            <summary>
            tensor
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Placeholder">
            <summary>
            Placeholder
            </summary>
        </member>
        <member name="F:Emgu.TF.AttrType.Func">
            <summary>
            func
            </summary>
        </member>
        <member name="T:Emgu.TF.Buffer">
            <summary>
            Buffer holds a pointer to a block of data and its associated length.
            Typically, the data consists of a serialized protocol buffer, but other data
            may also be held in a buffer.
            </summary>
        </member>
        <member name="M:Emgu.TF.Buffer.#ctor">
            <summary>
            Create a new empty buffer
            </summary>
        </member>
        <member name="M:Emgu.TF.Buffer.FromString(System.Byte[])">
            <summary>
            Create a new Buffer from raw protobuf data
            </summary>
            <param name="rawProtoBuf">The raw protobuf data</param>
            <returns>A Tensorflow buffer</returns>
        </member>
        <member name="P:Emgu.TF.Buffer.DataPtr">
            <summary>
            Get the pointer to the unmanaged data
            </summary>
        </member>
        <member name="P:Emgu.TF.Buffer.Length">
            <summary>
            The length of the Data in bytes
            </summary>
        </member>
        <member name="M:Emgu.TF.Buffer.GetMemoryStream">
            <summary>
            Get a copy of the data as a memory stream
            </summary>
            <returns>A copy of the data as a Memory stream</returns>
        </member>
        <member name="P:Emgu.TF.Buffer.Data">
            <summary>
            Get the raw data as an array of byte.
            </summary>
        </member>
        <member name="M:Emgu.TF.Buffer.DisposeObject">
            <summary>
            Release all the unmanaged memory associated with this Buffer
            </summary>
        </member>
        <member name="T:Emgu.TF.TfInvoke">
            <summary>
            Entry points to the native Tensorflow library.
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.GetNativeType(Emgu.TF.DataType)">
            <summary>
            Get the equivalent native type from Tensorflow DataType
            </summary>
            <param name="dataType">The tensorflow DataType</param>
            <returns>The equivalent native type</returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.CheckLibraryLoaded">
            <summary>
            Check to make sure all the unmanaged libraries are loaded
            </summary>
            <returns>True if library loaded</returns>
        </member>
        <member name="F:Emgu.TF.TfInvoke.TFCallingConvention">
            <summary>
            The Tensorflow native api calling convention
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.StringMarshalType">
            <summary>
            The string marshal type
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.BoolMarshalType">
            <summary>
            Represent a bool value in C++
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.BoolToIntMarshalType">
            <summary>
            Represent a int value in C++
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.LoadUnmanagedModules(System.String,System.String[])">
            <summary>
            Attempts to load tensorflow modules from the specific location
            </summary>
            <param name="loadDirectory">The directory where the unmanaged modules will be loaded. If it is null, the default location will be used.</param>
            <param name="unmanagedModules">The names of tensorflow modules. </param>
            <returns>True if all the modules has been loaded successfully</returns>
            <remarks>If <paramref name="loadDirectory"/> is null, the default location on windows is the dll's path appended by either "x64" or "x86", depends on the applications current mode.</remarks>
        </member>
        <member name="M:Emgu.TF.TfInvoke.GetModuleFormatString">
            <summary>
            Get the module format string.
            </summary>
            <returns>On Windows, "{0}".dll will be returned; On Linux, "lib{0}.so" will be returned; Otherwise {0} is returned.</returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.DefaultLoadUnmanagedModules(System.String[])">
            <summary>
            Attempts to load tensorflow modules from the specific location
            </summary>
            <param name="modules">The names of tensorflow modules.</param>
            <returns>True if all the modules has been loaded successfully</returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.#cctor">
            <summary>
            Static Constructor to setup tensorflow environment
            </summary>
        </member>
        <member name="P:Emgu.TF.TfInvoke.Version">
            <summary>
            Get the tensor flow version
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.DataTypeSize(Emgu.TF.DataType)">
            <summary>
            Get the size of the datatype in bytes.
            </summary>
            <param name="dt"></param>
            <returns></returns>
        </member>
        <member name="M:Emgu.TF.TfInvoke.GetAllOpList">
            <summary>
            Get the proto buffer that contains the list of all the supported operations.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Emgu.TF.TfInvoke.IsGoogleCudaEnabled">
            <summary>
            Returns true if GOOGLE_CUDA is defined.
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.OpIsRegistered(System.String)">
            <summary>
            Returns true if the operation is registered.
            </summary>
        </member>
        <member name="M:Emgu.TF.TfInvoke.OpHasKernel(System.String)">
            <summary>
            Returns true if the operation has a kernel
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.ExternLibrary">
            <summary>
            The file name of the tfextern library
            </summary>
        </member>
        <member name="F:Emgu.TF.TfInvoke.TensorflowModuleList">
            <summary>
            The List of the tensorflow modules
            </summary>
        </member>
        <member name="T:Emgu.TF.Function">
            <summary>
            A tensorflow function
            </summary>
        </member>
        <member name="M:Emgu.TF.Function.#ctor(System.Byte[],Emgu.TF.Status)">
            <summary>
            Construct and return the function whose FunctionDef representation is
            serialized in <paramref name="proto"/>
            </summary>
            <param name="proto">Serialized FunctionDef</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Function.DisposeObject">
            <summary>
            Release all the unmanaged memory associated with this Buffer
            </summary>
        </member>
        <member name="M:Emgu.TF.Function.ToFunctionDef(Emgu.TF.Buffer,Emgu.TF.Status)">
            <summary>
            Write out a serialized representation of this Function (as a FunctionDef protocol
            message) 
            </summary>
            <param name="outputFuncDef">a serialized representation of this Function (as a FunctionDef protocol message) </param>
            <param name="status">The status</param>
        </member>
        <member name="T:Emgu.TF.Graph">
            <summary>
            Tensorflow Graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.#ctor">
            <summary>
            Create a new Graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.SetTensorShape(Emgu.TF.Output,System.Int32[],Emgu.TF.Status)">
            <summary>
            Sets the shape of the Tensor referenced by <paramref name="output"/> in graph to
            the shape described by <paramref name="dims"/>.
            </summary>
            <param name="output">The output</param>
            <param name="dims">The shape</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.GetTensorShape(Emgu.TF.Output,Emgu.TF.Status)">
            <summary>
            Returns the shape of the Tensor
            </summary>
            <param name="output">The output</param>
            <param name="status">The status</param>
            <returns>The shape of the Tensor</returns>
        </member>
        <member name="M:Emgu.TF.Graph.DisposeObject">
            <summary>
            Release all the unmanaged memory associated with the graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.ImportGraphDef(Emgu.TF.Buffer,Emgu.TF.ImportGraphDefOptions,Emgu.TF.Status)">
            <summary>
            Import the graph serialized in <paramref name="graphDef"/> into the current graph.
            Convenience function for when no return outputs have been added.
            </summary>
            <param name="graphDef">The GraphDef to be imported</param>
            <param name="options">The import options</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.NewOperation(System.String,System.String)">
            <summary>
            Operation will only be added to graph when FinishOperation() is
            called (assuming FinishOperation() does not return an error).
            Graph must not be deleted until after FinishOperation() is
            called.
            </summary>
            <param name="opType">The operation type</param>
            <param name="opName">The name of the operation</param>
            <returns>A new operation description</returns>
        </member>
        <member name="M:Emgu.TF.Graph.OperationByName(System.String)">
            <summary>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </summary>
            <param name="opName">The name of the operation</param>
            <returns>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </returns>
        </member>
        <member name="P:Emgu.TF.Graph.Item(System.String)">
            <summary>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </summary>
            <param name="name">The name of the operation</param>
            <returns>
            Returns the operation in the graph with the specific name. Returns null if
            no operation found.
            </returns>
        </member>
        <member name="M:Emgu.TF.Graph.NextOperation(System.IntPtr@)">
            <summary>
            Iterate through the operations of a graph.
            </summary>
            <param name="pos">The position pointer that can be used to iterate though the operations of this graph. Use IntPtr.Zero to get the first operation</param>
            <returns>The next operation from the position</returns>
        </member>
        <member name="M:Emgu.TF.Graph.ToGraphDef(Emgu.TF.Buffer,Emgu.TF.Status)">
            <summary>
            Write out a serialized representation of `graph` (as a GraphDef protocol
            message).
            </summary>
            <param name="outputGraphDef">The buffer to store the GraphDef</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.Versions(Emgu.TF.Status)">
            <summary>
            Returns the serialized VersionDef proto for this graph.
            </summary>
            <return>The serialized VersionDef proto for this graph.</return>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Graph.GetOpDef(System.String,Emgu.TF.Status)">
            <summary>
            Get the operation definition in protobuf format
            </summary>
            <param name="opName">The name of the operation</param>
            <param name="status">The status</param>
            <returns>The operation definition in protobuf format</returns>
        </member>
        <member name="P:Emgu.TF.Graph.NumFunctions">
            <summary>
            Returns the number of TF_Functions registered in the graph
            </summary>
        </member>
        <member name="M:Emgu.TF.Graph.GetEnumerator">
            <summary>
            Get an enumerator of the Operations in this Graph
            </summary>
            <returns>An enumerator of the Operations in this Graph</returns>
        </member>
        <member name="M:Emgu.TF.Graph.Abort(System.String,System.Boolean,System.String)">
            <summary>
            Abort
            </summary>
            <param name="error_msg">error msg</param>
            <param name="exit_without_error">exit without error</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Abs(Emgu.TF.Output,System.String)">
            <summary>
            Abs
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulateNV2(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            AccumulateNV2
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sum(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorApplyGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AccumulatorApplyGradient
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="local_step">Input to the operation. </param>
            <param name="gradient">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorNumAccumulated(Emgu.TF.Output,System.String)">
            <summary>
            AccumulatorNumAccumulated
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] num_accumulated(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorSetGlobalStep(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AccumulatorSetGlobalStep
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="new_global_step">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AccumulatorTakeGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            AccumulatorTakeGradient
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="num_required">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] average(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Acos(Emgu.TF.Output,System.String)">
            <summary>
            Acos
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Acosh(Emgu.TF.Output,System.String)">
            <summary>
            Acosh
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Add(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Add
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddManySparseToTensorsMap(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            AddManySparseToTensorsMap
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_handles(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddN(Emgu.TF.Output,System.String)">
            <summary>
            AddN
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sum(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddSparseToTensorsMap(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            AddSparseToTensorsMap
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_handle(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AddV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AddV2
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustContrast(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AdjustContrast
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="contrast_factor">Input to the operation. </param>
            <param name="min_value">Input to the operation. </param>
            <param name="max_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustContrastv2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AdjustContrastv2
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="contrast_factor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustHue(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AdjustHue
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AdjustSaturation(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AdjustSaturation
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.All(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            All
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AllCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            AllCandidateSampler
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="num_sampled">num sampled</param>
            <param name="unique">unique</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AllToAll(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            AllToAll
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_assignment">Input to the operation. </param>
            <param name="concat_dimension">concat dimension</param>
            <param name="split_dimension">split dimension</param>
            <param name="split_count">split count</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Angle(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Angle
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AnonymousIterator(Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            AnonymousIterator
            </summary>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AnonymousIteratorV2(Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            AnonymousIteratorV2
            </summary>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            [1] deleter(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Any(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Any
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyAdadelta
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ApplyAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="update_slots">update slots</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyAdagradDA
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdam(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ApplyAdam
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="beta2_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAdaMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyAdaMax
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyAddSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyAddSign
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyCenteredRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyFtrl
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyFtrlV2
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyGradientDescent
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ApplyMomentum
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyPowerSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyPowerSign
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="logbase">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyProximalAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyProximalGradientDescent
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ApplyRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ApproximateEqual(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String)">
            <summary>
            ApproximateEqual
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="tolerance">tolerance</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ArgMax(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            ArgMax
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="dimension">Input to the operation. </param>
            <param name="output_type">output type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ArgMin(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            ArgMin
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="dimension">Input to the operation. </param>
            <param name="output_type">output type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Asin(Emgu.TF.Output,System.String)">
            <summary>
            Asin
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Asinh(Emgu.TF.Output,System.String)">
            <summary>
            Asinh
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Assert(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            Assert
            </summary>
            <param name="condition">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="summarize">summarize</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Assign(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            Assign
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="validate_shape">validate shape</param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AssignAdd(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            AssignAdd
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AssignAddVariableOp(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AssignAddVariableOp
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AssignSub(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            AssignSub
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AssignSubVariableOp(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AssignSubVariableOp
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AssignVariableOp(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            AssignVariableOp
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.AsString(Emgu.TF.Output,System.Int64,System.Boolean,System.Boolean,System.Int64,System.String,System.String)">
            <summary>
            AsString
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="precision">precision</param>
            <param name="scientific">scientific</param>
            <param name="shortest">shortest</param>
            <param name="width">width</param>
            <param name="fill">fill</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Atan(Emgu.TF.Output,System.String)">
            <summary>
            Atan
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Atan2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Atan2
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Atanh(Emgu.TF.Output,System.String)">
            <summary>
            Atanh
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AudioSpectrogram(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            AudioSpectrogram
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="window_size">window size</param>
            <param name="stride">stride</param>
            <param name="magnitude_squared">magnitude squared</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] spectrogram(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AudioSummary(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Int64,System.String)">
            <summary>
            AudioSummary
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="sample_rate">sample rate</param>
            <param name="max_outputs">max outputs</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AudioSummaryV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            AudioSummaryV2
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="max_outputs">max outputs</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPool(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            AvgPool
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPool3D(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            AvgPool3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPool3DGrad(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            AvgPool3DGrad
            </summary>
            <param name="orig_input_shape">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.AvgPoolGrad(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            AvgPoolGrad
            </summary>
            <param name="orig_input_shape">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Barrier(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            Barrier
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierClose(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            BarrierClose
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="cancel_pending_enqueues">cancel pending enqueues</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierIncompleteSize(Emgu.TF.Output,System.String)">
            <summary>
            BarrierIncompleteSize
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierInsertMany(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BarrierInsertMany
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="component_index">component index</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierReadySize(Emgu.TF.Output,System.String)">
            <summary>
            BarrierReadySize
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BarrierTakeMany(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Boolean,System.Boolean,System.Int64,System.String)">
            <summary>
            BarrierTakeMany
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="num_elements">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="allow_small_batch">allow small batch</param>
            <param name="wait_for_incomplete">wait for incomplete</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] keys(type: DtString).
            [2] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Batch(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            Batch
            </summary>
            <param name="in_tensors">Input to the operation. </param>
            <param name="num_batch_threads">num batch threads</param>
            <param name="max_batch_size">max batch size</param>
            <param name="batch_timeout_micros">batch timeout micros</param>
            <param name="grad_timeout_micros">grad timeout micros</param>
            <param name="max_enqueued_batches">max enqueued batches</param>
            <param name="allowed_batch_sizes">allowed batch sizes</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="batching_queue">batching queue</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] batched_tensors(type: DtInvalid).
            [1] batch_index(type: DtInt64).
            [2] id(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchCholesky(Emgu.TF.Output,System.String)">
            <summary>
            BatchCholesky
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchCholeskyGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BatchCholeskyGrad
            </summary>
            <param name="l">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            BatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            BatchDatasetV2
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="parallel_copy">parallel copy</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFFT(Emgu.TF.Output,System.String)">
            <summary>
            BatchFFT
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFFT2D(Emgu.TF.Output,System.String)">
            <summary>
            BatchFFT2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFFT3D(Emgu.TF.Output,System.String)">
            <summary>
            BatchFFT3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchFunction(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,Emgu.TF.DataType[],System.Int64,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            BatchFunction
            </summary>
            <param name="in_tensors">Input to the operation. </param>
            <param name="captured_tensors">Input to the operation. </param>
            <param name="num_batch_threads">num batch threads</param>
            <param name="max_batch_size">max batch size</param>
            <param name="batch_timeout_micros">batch timeout micros</param>
            <param name="Tout">Tout</param>
            <param name="max_enqueued_batches">max enqueued batches</param>
            <param name="allowed_batch_sizes">allowed batch sizes</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="batching_queue">batching queue</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out_tensors(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchIFFT(Emgu.TF.Output,System.String)">
            <summary>
            BatchIFFT
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchIFFT2D(Emgu.TF.Output,System.String)">
            <summary>
            BatchIFFT2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchIFFT3D(Emgu.TF.Output,System.String)">
            <summary>
            BatchIFFT3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatMul(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            BatchMatMul
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="adj_x">adj x</param>
            <param name="adj_y">adj y</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatMulV2(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            BatchMatMulV2
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="adj_x">adj x</param>
            <param name="adj_y">adj y</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixBandPart(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BatchMatrixBandPart
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_lower">Input to the operation. </param>
            <param name="num_upper">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] band(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixDeterminant(Emgu.TF.Output,System.String)">
            <summary>
            BatchMatrixDeterminant
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixDiag(Emgu.TF.Output,System.String)">
            <summary>
            BatchMatrixDiag
            </summary>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixDiagPart(Emgu.TF.Output,System.String)">
            <summary>
            BatchMatrixDiagPart
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] diagonal(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixInverse(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            BatchMatrixInverse
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="adjoint">adjoint</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixSetDiag(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BatchMatrixSetDiag
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            BatchMatrixSolve
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="adjoint">adjoint</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixSolveLs(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            BatchMatrixSolveLs
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="l2_regularizer">Input to the operation. </param>
            <param name="fast">fast</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchMatrixTriangularSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            BatchMatrixTriangularSolve
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="lower">lower</param>
            <param name="adjoint">adjoint</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchNormWithGlobalNormalization(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Boolean,System.String)">
            <summary>
            BatchNormWithGlobalNormalization
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="gamma">Input to the operation. </param>
            <param name="variance_epsilon">variance epsilon</param>
            <param name="scale_after_normalization">scale after normalization</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchNormWithGlobalNormalizationGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Boolean,System.String)">
            <summary>
            BatchNormWithGlobalNormalizationGrad
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="gamma">Input to the operation. </param>
            <param name="backprop">Input to the operation. </param>
            <param name="variance_epsilon">variance epsilon</param>
            <param name="scale_after_normalization">scale after normalization</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] dx(type: DtInvalid).
            [1] dm(type: DtInvalid).
            [2] dv(type: DtInvalid).
            [3] db(type: DtInvalid).
            [4] dg(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchSelfAdjointEig(Emgu.TF.Output,System.String)">
            <summary>
            BatchSelfAdjointEig
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchSelfAdjointEigV2(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            BatchSelfAdjointEigV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_v">compute v</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] e(type: DtInvalid).
            [1] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchSvd(Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            BatchSvd
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_uv">compute uv</param>
            <param name="full_matrices">full matrices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] s(type: DtInvalid).
            [1] u(type: DtInvalid).
            [2] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchToSpace(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BatchToSpace
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="crops">Input to the operation. </param>
            <param name="block_size">block size</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BatchToSpaceND(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BatchToSpaceND
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_shape">Input to the operation. </param>
            <param name="crops">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BesselI0e(Emgu.TF.Output,System.String)">
            <summary>
            BesselI0e
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BesselI1e(Emgu.TF.Output,System.String)">
            <summary>
            BesselI1e
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Betainc(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Betainc
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BiasAdd(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            BiasAdd
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BiasAddGrad(Emgu.TF.Output,System.String,System.String)">
            <summary>
            BiasAddGrad
            </summary>
            <param name="out_backprop">Input to the operation. </param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BiasAddV1(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BiasAddV1
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Bincount(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Bincount
            </summary>
            <param name="arr">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="weights">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] bins(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Bitcast(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            Bitcast
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="type">type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BitwiseAnd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BitwiseAnd
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BitwiseOr(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BitwiseOr
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BitwiseXor(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BitwiseXor
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesAggregateStats(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            BoostedTreesAggregateStats
            </summary>
            <param name="node_ids">Input to the operation. </param>
            <param name="gradients">Input to the operation. </param>
            <param name="hessians">Input to the operation. </param>
            <param name="feature">Input to the operation. </param>
            <param name="max_splits">max splits</param>
            <param name="num_buckets">num buckets</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stats_summary(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesBucketize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesBucketize
            </summary>
            <param name="float_values">Input to the operation. </param>
            <param name="bucket_boundaries">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] buckets(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCalculateBestFeatureSplit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String,System.String)">
            <summary>
            BoostedTreesCalculateBestFeatureSplit
            </summary>
            <param name="node_id_range">Input to the operation. </param>
            <param name="stats_summary">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="tree_complexity">Input to the operation. </param>
            <param name="min_node_weight">Input to the operation. </param>
            <param name="logits_dimension">logits dimension</param>
            <param name="split_type">split type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] node_ids(type: DtInt32).
            [1] gains(type: DtFloat).
            [2] feature_dimensions(type: DtInt32).
            [3] thresholds(type: DtInt32).
            [4] left_node_contribs(type: DtFloat).
            [5] right_node_contribs(type: DtFloat).
            [6] split_with_default_directions(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCalculateBestGainsPerFeature(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesCalculateBestGainsPerFeature
            </summary>
            <param name="node_id_range">Input to the operation. </param>
            <param name="stats_summary_list">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="tree_complexity">Input to the operation. </param>
            <param name="min_node_weight">Input to the operation. </param>
            <param name="max_splits">max splits</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] node_ids_list(type: DtInt32).
            [1] gains_list(type: DtFloat).
            [2] thresholds_list(type: DtInt32).
            [3] left_node_contribs_list(type: DtFloat).
            [4] right_node_contribs_list(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCenterBias(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesCenterBias
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="mean_gradients">Input to the operation. </param>
            <param name="mean_hessians">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] continue_centering(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCreateEnsemble(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesCreateEnsemble
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="stamp_token">Input to the operation. </param>
            <param name="tree_ensemble_serialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesCreateQuantileStreamResource(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesCreateQuantileStreamResource
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="num_streams">Input to the operation. </param>
            <param name="max_elements">max elements</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesDeserializeEnsemble(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesDeserializeEnsemble
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="stamp_token">Input to the operation. </param>
            <param name="tree_ensemble_serialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesEnsembleResourceHandleOp(System.String,System.String,System.String)">
            <summary>
            BoostedTreesEnsembleResourceHandleOp
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesExampleDebugOutputs(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesExampleDebugOutputs
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="bucketized_features">Input to the operation. </param>
            <param name="logits_dimension">logits dimension</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] examples_debug_outputs_serialized(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesGetEnsembleStates(Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesGetEnsembleStates
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stamp_token(type: DtInt64).
            [1] num_trees(type: DtInt32).
            [2] num_finalized_trees(type: DtInt32).
            [3] num_attempted_layers(type: DtInt32).
            [4] last_layer_nodes_range(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesMakeQuantileSummaries(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesMakeQuantileSummaries
            </summary>
            <param name="float_values">Input to the operation. </param>
            <param name="example_weights">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summaries(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesMakeStatsSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            BoostedTreesMakeStatsSummary
            </summary>
            <param name="node_ids">Input to the operation. </param>
            <param name="gradients">Input to the operation. </param>
            <param name="hessians">Input to the operation. </param>
            <param name="bucketized_features_list">Input to the operation. </param>
            <param name="max_splits">max splits</param>
            <param name="num_buckets">num buckets</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stats_summary(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesPredict(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesPredict
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="bucketized_features">Input to the operation. </param>
            <param name="logits_dimension">logits dimension</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] logits(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceAddSummaries(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesQuantileStreamResourceAddSummaries
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="summaries">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceDeserialize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesQuantileStreamResourceDeserialize
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="bucket_boundaries">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceFlush(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            BoostedTreesQuantileStreamResourceFlush
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="num_buckets">Input to the operation. </param>
            <param name="generate_quantiles">generate quantiles</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceGetBucketBoundaries(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesQuantileStreamResourceGetBucketBoundaries
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="num_features">num features</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] bucket_boundaries(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesQuantileStreamResourceHandleOp(System.String,System.String,System.String)">
            <summary>
            BoostedTreesQuantileStreamResourceHandleOp
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesSerializeEnsemble(Emgu.TF.Output,System.String)">
            <summary>
            BoostedTreesSerializeEnsemble
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] stamp_token(type: DtInt64).
            [1] tree_ensemble_serialized(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesTrainingPredict(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesTrainingPredict
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="cached_tree_ids">Input to the operation. </param>
            <param name="cached_node_ids">Input to the operation. </param>
            <param name="bucketized_features">Input to the operation. </param>
            <param name="logits_dimension">logits dimension</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] partial_logits(type: DtFloat).
            [1] tree_ids(type: DtInt32).
            [2] node_ids(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BoostedTreesUpdateEnsemble(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            BoostedTreesUpdateEnsemble
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="feature_ids">Input to the operation. </param>
            <param name="node_ids">Input to the operation. </param>
            <param name="gains">Input to the operation. </param>
            <param name="thresholds">Input to the operation. </param>
            <param name="left_node_contribs">Input to the operation. </param>
            <param name="right_node_contribs">Input to the operation. </param>
            <param name="max_depth">Input to the operation. </param>
            <param name="learning_rate">Input to the operation. </param>
            <param name="pruning_mode">pruning mode</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.BroadcastArgs(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BroadcastArgs
            </summary>
            <param name="s0">Input to the operation. </param>
            <param name="s1">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] r0(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BroadcastGradientArgs(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BroadcastGradientArgs
            </summary>
            <param name="s0">Input to the operation. </param>
            <param name="s1">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] r0(type: DtInvalid).
            [1] r1(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.BroadcastTo(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            BroadcastTo
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Bucketize(Emgu.TF.Output,System.Single[],System.String)">
            <summary>
            Bucketize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="boundaries">boundaries</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CacheDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            CacheDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Case(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            Case
            </summary>
            <param name="branch_index">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cast(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            Cast
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="DstT">DstT</param>
            <param name="Truncate">Truncate</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Ceil(Emgu.TF.Output,System.String)">
            <summary>
            Ceil
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CheckNumerics(Emgu.TF.Output,System.String,System.String)">
            <summary>
            CheckNumerics
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="message">message</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cholesky(Emgu.TF.Output,System.String)">
            <summary>
            Cholesky
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CholeskyGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            CholeskyGrad
            </summary>
            <param name="l">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ChooseFastestBranchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64[],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ChooseFastestBranchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="ratio_numerator">Input to the operation. </param>
            <param name="ratio_denominator">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="num_elements_per_branch">num elements per branch</param>
            <param name="other_arguments_lengths">other arguments lengths</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ClipByValue(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ClipByValue
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="clip_value_min">Input to the operation. </param>
            <param name="clip_value_max">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CloseSummaryWriter(Emgu.TF.Output,System.String)">
            <summary>
            CloseSummaryWriter
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveBcastRecv(Emgu.TF.DataType,System.Int64,System.Int64,System.Int64,System.Int64[],System.String)">
            <summary>
            CollectiveBcastRecv
            </summary>
            <param name="T">T</param>
            <param name="group_size">group size</param>
            <param name="group_key">group key</param>
            <param name="instance_key">instance key</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveBcastSend(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64[],System.String)">
            <summary>
            CollectiveBcastSend
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_size">group size</param>
            <param name="group_key">group key</param>
            <param name="instance_key">instance key</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveGather(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64[],System.String)">
            <summary>
            CollectiveGather
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_size">group size</param>
            <param name="group_key">group key</param>
            <param name="instance_key">instance key</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CollectivePermute(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            CollectivePermute
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="source_target_pairs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CollectiveReduce(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String,System.Int64[],System.Int64[],System.String)">
            <summary>
            CollectiveReduce
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_size">group size</param>
            <param name="group_key">group key</param>
            <param name="instance_key">instance key</param>
            <param name="merge_op">merge op</param>
            <param name="final_op">final op</param>
            <param name="subdiv_offsets">subdiv offsets</param>
            <param name="wait_for">wait for</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CombinedNonMaxSuppression(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            CombinedNonMaxSuppression
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size_per_class">Input to the operation. </param>
            <param name="max_total_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="pad_per_class">pad per class</param>
            <param name="clip_boxes">clip boxes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] nmsed_boxes(type: DtFloat).
            [1] nmsed_scores(type: DtFloat).
            [2] nmsed_classes(type: DtFloat).
            [3] valid_detections(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CompareAndBitpack(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            CompareAndBitpack
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Complex(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Complex
            </summary>
            <param name="real">Input to the operation. </param>
            <param name="imag">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ComplexAbs(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            ComplexAbs
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ComputeAccidentalHits(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            ComputeAccidentalHits
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="sampled_candidates">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt32).
            [1] ids(type: DtInt64).
            [2] weights(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Concat(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Concat
            </summary>
            <param name="concat_dim">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConcatenateDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ConcatenateDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="another_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConcatOffset(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ConcatOffset
            </summary>
            <param name="concat_dim">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] offset(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConcatV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ConcatV2
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConditionalAccumulator(Emgu.TF.DataType,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            ConditionalAccumulator
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="reduction_type">reduction type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConfigureDistributedTPU(System.String,System.String,System.Boolean,System.String)">
            <summary>
            ConfigureDistributedTPU
            </summary>
            <param name="embedding_config">embedding config</param>
            <param name="tpu_embedding_config">tpu embedding config</param>
            <param name="is_global_init">is global init</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] topology(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conj(Emgu.TF.Output,System.String)">
            <summary>
            Conj
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConjugateTranspose(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ConjugateTranspose
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="perm">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Const(Emgu.TF.Tensor,Emgu.TF.DataType,System.String)">
            <summary>
            Const
            </summary>
            <param name="value">value</param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ConsumeMutexLock(Emgu.TF.Output,System.String)">
            <summary>
            ConsumeMutexLock
            </summary>
            <param name="mutex_lock">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ControlTrigger(System.String)">
            <summary>
            ControlTrigger
            </summary>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Conv2D(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Boolean,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            Conv2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="use_cudnn_on_gpu">use cudnn on gpu</param>
            <param name="explicit_paddings">explicit paddings</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv2DBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Boolean,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            Conv2DBackpropFilter
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter_sizes">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="use_cudnn_on_gpu">use cudnn on gpu</param>
            <param name="explicit_paddings">explicit paddings</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv2DBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Boolean,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            Conv2DBackpropInput
            </summary>
            <param name="input_sizes">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="use_cudnn_on_gpu">use cudnn on gpu</param>
            <param name="explicit_paddings">explicit paddings</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3D(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            Conv3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            Conv3DBackpropFilter
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropFilterV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            Conv3DBackpropFilterV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter_sizes">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Int64[],System.String)">
            <summary>
            Conv3DBackpropInput
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Conv3DBackpropInputV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            Conv3DBackpropInputV2
            </summary>
            <param name="input_sizes">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cos(Emgu.TF.Output,System.String)">
            <summary>
            Cos
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cosh(Emgu.TF.Output,System.String)">
            <summary>
            Cosh
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CountUpTo(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            CountUpTo
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="limit">limit</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CreateSummaryDbWriter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            CreateSummaryDbWriter
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="db_uri">Input to the operation. </param>
            <param name="experiment_name">Input to the operation. </param>
            <param name="run_name">Input to the operation. </param>
            <param name="user_name">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.CreateSummaryFileWriter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            CreateSummaryFileWriter
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="logdir">Input to the operation. </param>
            <param name="max_queue">Input to the operation. </param>
            <param name="flush_millis">Input to the operation. </param>
            <param name="filename_suffix">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.CropAndResize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Single,System.String)">
            <summary>
            CropAndResize
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="box_ind">Input to the operation. </param>
            <param name="crop_size">Input to the operation. </param>
            <param name="method">method</param>
            <param name="extrapolation_value">extrapolation value</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] crops(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CropAndResizeGradBoxes(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            CropAndResizeGradBoxes
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="image">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="box_ind">Input to the operation. </param>
            <param name="method">method</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CropAndResizeGradImage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String)">
            <summary>
            CropAndResizeGradImage
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="box_ind">Input to the operation. </param>
            <param name="image_size">Input to the operation. </param>
            <param name="T">T</param>
            <param name="method">method</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cross(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Cross
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CrossReplicaSum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            CrossReplicaSum
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="group_assignment">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CTCBeamSearchDecoder(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            CTCBeamSearchDecoder
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="sequence_length">Input to the operation. </param>
            <param name="beam_width">beam width</param>
            <param name="top_paths">top paths</param>
            <param name="merge_repeated">merge repeated</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] decoded_indices(type: DtInt64).
            [1] decoded_values(type: DtInt64).
            [2] decoded_shape(type: DtInt64).
            [3] log_probability(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CTCGreedyDecoder(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            CTCGreedyDecoder
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="sequence_length">Input to the operation. </param>
            <param name="merge_repeated">merge repeated</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] decoded_indices(type: DtInt64).
            [1] decoded_values(type: DtInt64).
            [2] decoded_shape(type: DtInt64).
            [3] log_probability(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CTCLoss(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            CTCLoss
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="labels_indices">Input to the operation. </param>
            <param name="labels_values">Input to the operation. </param>
            <param name="sequence_length">Input to the operation. </param>
            <param name="preprocess_collapse_repeated">preprocess collapse repeated</param>
            <param name="ctc_merge_repeated">ctc merge repeated</param>
            <param name="ignore_longer_outputs_than_inputs">ignore longer outputs than inputs</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] loss(type: DtFloat).
            [1] gradient(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNN(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            CudnnRNN
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_h(type: DtInvalid).
            [2] output_c(type: DtInvalid).
            [3] reserve_space(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNBackprop(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            CudnnRNNBackprop
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="output">Input to the operation. </param>
            <param name="output_h">Input to the operation. </param>
            <param name="output_c">Input to the operation. </param>
            <param name="output_backprop">Input to the operation. </param>
            <param name="output_h_backprop">Input to the operation. </param>
            <param name="output_c_backprop">Input to the operation. </param>
            <param name="reserve_space">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] input_backprop(type: DtInvalid).
            [1] input_h_backprop(type: DtInvalid).
            [2] input_c_backprop(type: DtInvalid).
            [3] params_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNBackpropV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            CudnnRNNBackpropV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="output">Input to the operation. </param>
            <param name="output_h">Input to the operation. </param>
            <param name="output_c">Input to the operation. </param>
            <param name="output_backprop">Input to the operation. </param>
            <param name="output_h_backprop">Input to the operation. </param>
            <param name="output_c_backprop">Input to the operation. </param>
            <param name="reserve_space">Input to the operation. </param>
            <param name="host_reserved">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] input_backprop(type: DtInvalid).
            [1] input_h_backprop(type: DtInvalid).
            [2] input_c_backprop(type: DtInvalid).
            [3] params_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNBackpropV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            CudnnRNNBackpropV3
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="sequence_lengths">Input to the operation. </param>
            <param name="output">Input to the operation. </param>
            <param name="output_h">Input to the operation. </param>
            <param name="output_c">Input to the operation. </param>
            <param name="output_backprop">Input to the operation. </param>
            <param name="output_h_backprop">Input to the operation. </param>
            <param name="output_c_backprop">Input to the operation. </param>
            <param name="reserve_space">Input to the operation. </param>
            <param name="host_reserved">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="time_major">time major</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] input_backprop(type: DtInvalid).
            [1] input_h_backprop(type: DtInvalid).
            [2] input_c_backprop(type: DtInvalid).
            [3] params_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNCanonicalToParams(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            CudnnRNNCanonicalToParams
            </summary>
            <param name="num_layers">Input to the operation. </param>
            <param name="num_units">Input to the operation. </param>
            <param name="input_size">Input to the operation. </param>
            <param name="weights">Input to the operation. </param>
            <param name="biases">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] params(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNParamsSize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            CudnnRNNParamsSize
            </summary>
            <param name="num_layers">Input to the operation. </param>
            <param name="num_units">Input to the operation. </param>
            <param name="input_size">Input to the operation. </param>
            <param name="T">T</param>
            <param name="S">S</param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] params_size(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNParamsToCanonical(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            CudnnRNNParamsToCanonical
            </summary>
            <param name="num_layers">Input to the operation. </param>
            <param name="num_units">Input to the operation. </param>
            <param name="input_size">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="num_params">num params</param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] weights(type: DtInvalid).
            [1] biases(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            CudnnRNNV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_h(type: DtInvalid).
            [2] output_c(type: DtInvalid).
            [3] reserve_space(type: DtInvalid).
            [4] host_reserved(type: DtInt8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.CudnnRNNV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String,System.Single,System.Int64,System.Int64,System.Boolean,System.Boolean,System.String)">
            <summary>
            CudnnRNNV3
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_h">Input to the operation. </param>
            <param name="input_c">Input to the operation. </param>
            <param name="parameters">Input to the operation. </param>
            <param name="sequence_lengths">Input to the operation. </param>
            <param name="rnn_mode">rnn mode</param>
            <param name="input_mode">input mode</param>
            <param name="direction">direction</param>
            <param name="dropout">dropout</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="is_training">is training</param>
            <param name="time_major">time major</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_h(type: DtInvalid).
            [2] output_c(type: DtInvalid).
            [3] reserve_space(type: DtInvalid).
            [4] host_reserved(type: DtInt8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cumprod(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            Cumprod
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="exclusive">exclusive</param>
            <param name="reverse">reverse</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Cumsum(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            Cumsum
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="exclusive">exclusive</param>
            <param name="reverse">reverse</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DataFormatDimMap(Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            DataFormatDimMap
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="src_format">src format</param>
            <param name="dst_format">dst format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DataFormatVecPermute(Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            DataFormatVecPermute
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="src_format">src format</param>
            <param name="dst_format">dst format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DatasetToGraph(Emgu.TF.Output,System.String)">
            <summary>
            DatasetToGraph
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] graph(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DatasetToSingleElement(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            DatasetToSingleElement
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DebugGradientIdentity(Emgu.TF.Output,System.String)">
            <summary>
            DebugGradientIdentity
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DebugGradientRefIdentity(Emgu.TF.Output,System.String)">
            <summary>
            DebugGradientRefIdentity
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeAndCropJpeg(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Single,System.String,System.String)">
            <summary>
            DecodeAndCropJpeg
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="crop_window">Input to the operation. </param>
            <param name="channels">channels</param>
            <param name="ratio">ratio</param>
            <param name="fancy_upscaling">fancy upscaling</param>
            <param name="try_recover_truncated">try recover truncated</param>
            <param name="acceptable_fraction">acceptable fraction</param>
            <param name="dct_method">dct method</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeBase64(Emgu.TF.Output,System.String)">
            <summary>
            DecodeBase64
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeBmp(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            DecodeBmp
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="channels">channels</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeCompressed(Emgu.TF.Output,System.String,System.String)">
            <summary>
            DecodeCompressed
            </summary>
            <param name="bytes">Input to the operation. </param>
            <param name="compression_type">compression type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeCSV(Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            DecodeCSV
            </summary>
            <param name="records">Input to the operation. </param>
            <param name="record_defaults">Input to the operation. </param>
            <param name="field_delim">field delim</param>
            <param name="use_quote_delim">use quote delim</param>
            <param name="na_value">na value</param>
            <param name="select_cols">select cols</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeGif(Emgu.TF.Output,System.String)">
            <summary>
            DecodeGif
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeJpeg(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Boolean,System.Single,System.String,System.String)">
            <summary>
            DecodeJpeg
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="channels">channels</param>
            <param name="ratio">ratio</param>
            <param name="fancy_upscaling">fancy upscaling</param>
            <param name="try_recover_truncated">try recover truncated</param>
            <param name="acceptable_fraction">acceptable fraction</param>
            <param name="dct_method">dct method</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeJSONExample(Emgu.TF.Output,System.String)">
            <summary>
            DecodeJSONExample
            </summary>
            <param name="json_examples">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] binary_examples(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodePaddedRaw(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            DecodePaddedRaw
            </summary>
            <param name="input_bytes">Input to the operation. </param>
            <param name="fixed_length">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="little_endian">little endian</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodePng(Emgu.TF.Output,System.Int64,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            DecodePng
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="channels">channels</param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeProtoV2(Emgu.TF.Output,System.String,System.String[],Emgu.TF.DataType[],System.String,System.String,System.Boolean,System.String)">
            <summary>
            DecodeProtoV2
            </summary>
            <param name="bytes">Input to the operation. </param>
            <param name="message_type">message type</param>
            <param name="field_names">field names</param>
            <param name="output_types">output types</param>
            <param name="descriptor_source">descriptor source</param>
            <param name="message_format">message format</param>
            <param name="sanitize">sanitize</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sizes(type: DtInt32).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeRaw(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            DecodeRaw
            </summary>
            <param name="bytes">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="little_endian">little endian</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DecodeWav(Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            DecodeWav
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="desired_channels">desired channels</param>
            <param name="desired_samples">desired samples</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] audio(type: DtFloat).
            [1] sample_rate(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeepCopy(Emgu.TF.Output,System.String)">
            <summary>
            DeepCopy
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeleteIterator(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            DeleteIterator
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="deleter">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DeleteSessionTensor(Emgu.TF.Output,System.String)">
            <summary>
            DeleteSessionTensor
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DenseToDenseSetOperation(Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            DenseToDenseSetOperation
            </summary>
            <param name="set1">Input to the operation. </param>
            <param name="set2">Input to the operation. </param>
            <param name="set_operation">set operation</param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result_indices(type: DtInt64).
            [1] result_values(type: DtInvalid).
            [2] result_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DenseToSparseSetOperation(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            DenseToSparseSetOperation
            </summary>
            <param name="set1">Input to the operation. </param>
            <param name="set2_indices">Input to the operation. </param>
            <param name="set2_values">Input to the operation. </param>
            <param name="set2_shape">Input to the operation. </param>
            <param name="set_operation">set operation</param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result_indices(type: DtInt64).
            [1] result_values(type: DtInvalid).
            [2] result_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthToSpace(Emgu.TF.Output,System.Int64,System.String,System.String)">
            <summary>
            DepthToSpace
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_size">block size</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthwiseConv2dNative(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            DepthwiseConv2dNative
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthwiseConv2dNativeBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            DepthwiseConv2dNativeBackpropFilter
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter_sizes">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DepthwiseConv2dNativeBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.String,System.Int64[],System.String)">
            <summary>
            DepthwiseConv2dNativeBackpropInput
            </summary>
            <param name="input_sizes">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            Dequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_range">Input to the operation. </param>
            <param name="max_range">Input to the operation. </param>
            <param name="mode">mode</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeserializeIterator(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            DeserializeIterator
            </summary>
            <param name="resource_handle">Input to the operation. </param>
            <param name="serialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DeserializeManySparse(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            DeserializeManySparse
            </summary>
            <param name="serialized_sparse">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DeserializeSparse(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            DeserializeSparse
            </summary>
            <param name="serialized_sparse">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DestroyResourceOp(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            DestroyResourceOp
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="ignore_lookup_error">ignore lookup error</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.DestroyTemporaryVariable(Emgu.TF.Output,System.String,System.String)">
            <summary>
            DestroyTemporaryVariable
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="var_name">var name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Diag(Emgu.TF.Output,System.String)">
            <summary>
            Diag
            </summary>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DiagPart(Emgu.TF.Output,System.String)">
            <summary>
            DiagPart
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] diagonal(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Digamma(Emgu.TF.Output,System.String)">
            <summary>
            Digamma
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dilation2D(Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            Dilation2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="rates">rates</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dilation2DBackpropFilter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            Dilation2DBackpropFilter
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="rates">rates</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filter_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Dilation2DBackpropInput(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            Dilation2DBackpropInput
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="rates">rates</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] in_backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Div(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Div
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DivNoNan(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            DivNoNan
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DrawBoundingBoxes(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            DrawBoundingBoxes
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DrawBoundingBoxesV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            DrawBoundingBoxesV2
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="boxes">Input to the operation. </param>
            <param name="colors">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DynamicPartition(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            DynamicPartition
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="partitions">Input to the operation. </param>
            <param name="num_partitions">num partitions</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.DynamicStitch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            DynamicStitch
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] merged(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EagerPyFunc(Emgu.TF.Output,System.String,Emgu.TF.DataType[],System.String)">
            <summary>
            EagerPyFunc
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="token">token</param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EditDistance(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            EditDistance
            </summary>
            <param name="hypothesis_indices">Input to the operation. </param>
            <param name="hypothesis_values">Input to the operation. </param>
            <param name="hypothesis_shape">Input to the operation. </param>
            <param name="truth_indices">Input to the operation. </param>
            <param name="truth_values">Input to the operation. </param>
            <param name="truth_shape">Input to the operation. </param>
            <param name="normalize">normalize</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Elu(Emgu.TF.Output,System.String)">
            <summary>
            Elu
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EluGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            EluGrad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="outputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Empty(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.String)">
            <summary>
            Empty
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="init">init</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EmptyTensorList(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            EmptyTensorList
            </summary>
            <param name="element_shape">Input to the operation. </param>
            <param name="max_num_elements">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeBase64(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            EncodeBase64
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pad">pad</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeJpeg(Emgu.TF.Output,System.String,System.Int64,System.Boolean,System.Boolean,System.Boolean,System.String,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            EncodeJpeg
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="format">format</param>
            <param name="quality">quality</param>
            <param name="progressive">progressive</param>
            <param name="optimize_size">optimize size</param>
            <param name="chroma_downsampling">chroma downsampling</param>
            <param name="density_unit">density unit</param>
            <param name="x_density">x density</param>
            <param name="y_density">y density</param>
            <param name="xmp_metadata">xmp metadata</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeJpegVariableQuality(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            EncodeJpegVariableQuality
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="quality">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodePng(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            EncodePng
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="compression">compression</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeProto(Emgu.TF.Output,Emgu.TF.Output,System.String[],System.String,System.String,System.String)">
            <summary>
            EncodeProto
            </summary>
            <param name="sizes">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="field_names">field names</param>
            <param name="message_type">message type</param>
            <param name="descriptor_source">descriptor source</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] bytes(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EncodeWav(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            EncodeWav
            </summary>
            <param name="audio">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EnqueueTPUEmbeddingIntegerBatch(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            EnqueueTPUEmbeddingIntegerBatch
            </summary>
            <param name="batch">Input to the operation. </param>
            <param name="mode_override">Input to the operation. </param>
            <param name="device_ordinal">device ordinal</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.EnqueueTPUEmbeddingSparseBatch(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String[],System.String)">
            <summary>
            EnqueueTPUEmbeddingSparseBatch
            </summary>
            <param name="sample_indices">Input to the operation. </param>
            <param name="embedding_indices">Input to the operation. </param>
            <param name="aggregation_weights">Input to the operation. </param>
            <param name="mode_override">Input to the operation. </param>
            <param name="device_ordinal">device ordinal</param>
            <param name="combiners">combiners</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.EnqueueTPUEmbeddingSparseTensorBatch(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64,System.String[],System.Int64[],System.String)">
            <summary>
            EnqueueTPUEmbeddingSparseTensorBatch
            </summary>
            <param name="sample_indices">Input to the operation. </param>
            <param name="embedding_indices">Input to the operation. </param>
            <param name="aggregation_weights">Input to the operation. </param>
            <param name="mode_override">Input to the operation. </param>
            <param name="table_ids">table ids</param>
            <param name="device_ordinal">device ordinal</param>
            <param name="combiners">combiners</param>
            <param name="max_sequence_lengths">max sequence lengths</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.EnsureShape(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            EnsureShape
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Enter(Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            Enter
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="frame_name">frame name</param>
            <param name="is_constant">is constant</param>
            <param name="parallel_iterations">parallel iterations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Equal(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Equal
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Erf(Emgu.TF.Output,System.String)">
            <summary>
            Erf
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Erfc(Emgu.TF.Output,System.String)">
            <summary>
            Erfc
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.EuclideanNorm(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            EuclideanNorm
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Exit(Emgu.TF.Output,System.String)">
            <summary>
            Exit
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Exp(Emgu.TF.Output,System.String)">
            <summary>
            Exp
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExpandDims(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ExpandDims
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="dim">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalAssertNextDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalAssertNextDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="transformations">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalAutoShardDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalAutoShardDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="num_workers">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalBytesProducedStatsDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalBytesProducedStatsDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalChooseFastestDataset(Emgu.TF.Output,System.Int64,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalChooseFastestDataset
            </summary>
            <param name="input_datasets">Input to the operation. </param>
            <param name="num_experiments">num experiments</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalCSVDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            ExperimentalCSVDataset
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="header">Input to the operation. </param>
            <param name="field_delim">Input to the operation. </param>
            <param name="use_quote_delim">Input to the operation. </param>
            <param name="na_value">Input to the operation. </param>
            <param name="select_cols">Input to the operation. </param>
            <param name="record_defaults">Input to the operation. </param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalDatasetCardinality(Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalDatasetCardinality
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] cardinality(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalDatasetToTFRecord(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalDatasetToTFRecord
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalDenseToSparseBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalDenseToSparseBatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="row_shape">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalDirectedInterleaveDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalDirectedInterleaveDataset
            </summary>
            <param name="selector_input_dataset">Input to the operation. </param>
            <param name="data_input_datasets">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalGroupByReducerDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalGroupByReducerDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="key_func_other_arguments">Input to the operation. </param>
            <param name="init_func_other_arguments">Input to the operation. </param>
            <param name="reduce_func_other_arguments">Input to the operation. </param>
            <param name="finalize_func_other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalGroupByWindowDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalGroupByWindowDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="key_func_other_arguments">Input to the operation. </param>
            <param name="reduce_func_other_arguments">Input to the operation. </param>
            <param name="window_size_func_other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIdentityIndexedDataset(Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalIdentityIndexedDataset
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIgnoreErrorsDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalIgnoreErrorsDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIndexedDatasetGet(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalIndexedDatasetGet
            </summary>
            <param name="materialized">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIndexedDatasetMaterialize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalIndexedDatasetMaterialize
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="materialized">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalIteratorGetDevice(Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalIteratorGetDevice
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] device(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalLatencyStatsDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalLatencyStatsDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalLMDBDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalLMDBDataset
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalMapAndBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ExperimentalMapAndBatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="preserve_cardinality">preserve cardinality</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalMapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.Boolean,System.String)">
            <summary>
            ExperimentalMapDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="use_inter_op_parallelism">use inter op parallelism</param>
            <param name="preserve_cardinality">preserve cardinality</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalMatchingFilesDataset(Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalMatchingFilesDataset
            </summary>
            <param name="patterns">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalMaterializedIndexDatasetHandle(System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalMaterializedIndexDatasetHandle
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalMaxIntraOpParallelismDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalMaxIntraOpParallelismDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="max_intra_op_parallelism">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalNonSerializableDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalNonSerializableDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalNumaMapAndBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ExperimentalNumaMapAndBatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="preserve_cardinality">preserve cardinality</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalParallelInterleaveDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalParallelInterleaveDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="cycle_length">Input to the operation. </param>
            <param name="block_length">Input to the operation. </param>
            <param name="sloppy">Input to the operation. </param>
            <param name="buffer_output_elements">Input to the operation. </param>
            <param name="prefetch_input_elements">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalParseExampleDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String[],System.String[],Emgu.TF.DataType[],System.Int64[][],Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ExperimentalParseExampleDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="dense_defaults">Input to the operation. </param>
            <param name="sparse_keys">sparse keys</param>
            <param name="dense_keys">dense keys</param>
            <param name="sparse_types">sparse types</param>
            <param name="dense_shapes">dense shapes</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="sloppy">sloppy</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalPrivateThreadPoolDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalPrivateThreadPoolDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="num_threads">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalRandomDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalRandomDataset
            </summary>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalRebatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalRebatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="num_workers">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalScanDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ExperimentalScanDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="initial_state">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="preserve_cardinality">preserve cardinality</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalSetStatsAggregatorDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalSetStatsAggregatorDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="stats_aggregator">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="counter_prefix">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalSleepDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalSleepDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="sleep_microseconds">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalSlidingWindowDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalSlidingWindowDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="window_size">Input to the operation. </param>
            <param name="window_shift">Input to the operation. </param>
            <param name="window_stride">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalSqlDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalSqlDataset
            </summary>
            <param name="driver_name">Input to the operation. </param>
            <param name="data_source_name">Input to the operation. </param>
            <param name="query">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalStatsAggregatorHandle(System.String,System.String,System.String)">
            <summary>
            ExperimentalStatsAggregatorHandle
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalStatsAggregatorSummary(Emgu.TF.Output,System.String)">
            <summary>
            ExperimentalStatsAggregatorSummary
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalTakeWhileDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalTakeWhileDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalThreadPoolDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalThreadPoolDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="thread_pool">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalThreadPoolHandle(System.Int64,System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            ExperimentalThreadPoolHandle
            </summary>
            <param name="num_threads">num threads</param>
            <param name="display_name">display name</param>
            <param name="max_intra_op_parallelism">max intra op parallelism</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalUnbatchDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalUnbatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExperimentalUniqueDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ExperimentalUniqueDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Expm1(Emgu.TF.Output,System.String)">
            <summary>
            Expm1
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractGlimpse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            ExtractGlimpse
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="offsets">Input to the operation. </param>
            <param name="centered">centered</param>
            <param name="normalized">normalized</param>
            <param name="uniform_noise">uniform noise</param>
            <param name="noise">noise</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] glimpse(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractImagePatches(Emgu.TF.Output,System.Int64[],System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            ExtractImagePatches
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="ksizes">ksizes</param>
            <param name="strides">strides</param>
            <param name="rates">rates</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] patches(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractJpegShape(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            ExtractJpegShape
            </summary>
            <param name="contents">Input to the operation. </param>
            <param name="output_type">output type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] image_shape(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ExtractVolumePatches(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            ExtractVolumePatches
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksizes">ksizes</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] patches(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Fact(System.String)">
            <summary>
            Fact
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] fact(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeParam(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            FakeParam
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxArgs(Emgu.TF.Output,System.Single,System.Single,System.Int64,System.Boolean,System.String)">
            <summary>
            FakeQuantWithMinMaxArgs
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="min">min</param>
            <param name="max">max</param>
            <param name="num_bits">num bits</param>
            <param name="narrow_range">narrow range</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxArgsGradient(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Single,System.Int64,System.Boolean,System.String)">
            <summary>
            FakeQuantWithMinMaxArgsGradient
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="min">min</param>
            <param name="max">max</param>
            <param name="num_bits">num bits</param>
            <param name="narrow_range">narrow range</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVars(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            FakeQuantWithMinMaxVars
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits">num bits</param>
            <param name="narrow_range">narrow range</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVarsGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            FakeQuantWithMinMaxVarsGradient
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits">num bits</param>
            <param name="narrow_range">narrow range</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops_wrt_input(type: DtFloat).
            [1] backprop_wrt_min(type: DtFloat).
            [2] backprop_wrt_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVarsPerChannel(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            FakeQuantWithMinMaxVarsPerChannel
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits">num bits</param>
            <param name="narrow_range">narrow range</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQuantWithMinMaxVarsPerChannelGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            FakeQuantWithMinMaxVarsPerChannelGradient
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="num_bits">num bits</param>
            <param name="narrow_range">narrow range</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops_wrt_input(type: DtFloat).
            [1] backprop_wrt_min(type: DtFloat).
            [2] backprop_wrt_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FakeQueue(Emgu.TF.Output,System.String)">
            <summary>
            FakeQueue
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FFT(Emgu.TF.Output,System.String)">
            <summary>
            FFT
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FFT2D(Emgu.TF.Output,System.String)">
            <summary>
            FFT2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FFT3D(Emgu.TF.Output,System.String)">
            <summary>
            FFT3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FIFOQueue(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            FIFOQueue
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FIFOQueueV2(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            FIFOQueueV2
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Fill(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Fill
            </summary>
            <param name="dims">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FilterByLastComponentDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            FilterByLastComponentDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FilterDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            FilterDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Fingerprint(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Fingerprint
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="method">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] fingerprint(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            FixedLengthRecordDataset
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="header_bytes">Input to the operation. </param>
            <param name="record_bytes">Input to the operation. </param>
            <param name="footer_bytes">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            FixedLengthRecordDatasetV2
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="header_bytes">Input to the operation. </param>
            <param name="record_bytes">Input to the operation. </param>
            <param name="footer_bytes">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordReader(System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            FixedLengthRecordReader
            </summary>
            <param name="record_bytes">record bytes</param>
            <param name="header_bytes">header bytes</param>
            <param name="footer_bytes">footer bytes</param>
            <param name="hop_bytes">hop bytes</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedLengthRecordReaderV2(System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String,System.String)">
            <summary>
            FixedLengthRecordReaderV2
            </summary>
            <param name="record_bytes">record bytes</param>
            <param name="header_bytes">header bytes</param>
            <param name="footer_bytes">footer bytes</param>
            <param name="hop_bytes">hop bytes</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="encoding">encoding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FixedUnigramCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.String,System.Single,System.Int64,System.Int64,System.Int64,System.Single[],System.Int64,System.Int64,System.String)">
            <summary>
            FixedUnigramCandidateSampler
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="num_sampled">num sampled</param>
            <param name="unique">unique</param>
            <param name="range_max">range max</param>
            <param name="vocab_file">vocab file</param>
            <param name="distortion">distortion</param>
            <param name="num_reserved_ids">num reserved ids</param>
            <param name="num_shards">num shards</param>
            <param name="shard">shard</param>
            <param name="unigrams">unigrams</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FlatMapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            FlatMapDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Floor(Emgu.TF.Output,System.String)">
            <summary>
            Floor
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FloorDiv(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            FloorDiv
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FloorMod(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            FloorMod
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FlushSummaryWriter(Emgu.TF.Output,System.String)">
            <summary>
            FlushSummaryWriter
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.For(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            For
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="limit">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalAvgPool(Emgu.TF.Output,System.Single[],System.Boolean,System.Boolean,System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            FractionalAvgPool
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="pooling_ratio">pooling ratio</param>
            <param name="pseudo_random">pseudo random</param>
            <param name="overlapping">overlapping</param>
            <param name="deterministic">deterministic</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] row_pooling_sequence(type: DtInt64).
            [2] col_pooling_sequence(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalAvgPoolGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            FractionalAvgPoolGrad
            </summary>
            <param name="orig_input_tensor_shape">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="row_pooling_sequence">Input to the operation. </param>
            <param name="col_pooling_sequence">Input to the operation. </param>
            <param name="overlapping">overlapping</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalMaxPool(Emgu.TF.Output,System.Single[],System.Boolean,System.Boolean,System.Boolean,System.Int64,System.Int64,System.String)">
            <summary>
            FractionalMaxPool
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="pooling_ratio">pooling ratio</param>
            <param name="pseudo_random">pseudo random</param>
            <param name="overlapping">overlapping</param>
            <param name="deterministic">deterministic</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] row_pooling_sequence(type: DtInt64).
            [2] col_pooling_sequence(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FractionalMaxPoolGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            FractionalMaxPoolGrad
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="out_backprop">Input to the operation. </param>
            <param name="row_pooling_sequence">Input to the operation. </param>
            <param name="col_pooling_sequence">Input to the operation. </param>
            <param name="overlapping">overlapping</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNorm(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            FusedBatchNorm
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="offset">Input to the operation. </param>
            <param name="mean">Input to the operation. </param>
            <param name="variance">Input to the operation. </param>
            <param name="epsilon">epsilon</param>
            <param name="data_format">data format</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] batch_mean(type: DtInvalid).
            [2] batch_variance(type: DtInvalid).
            [3] reserve_space_1(type: DtInvalid).
            [4] reserve_space_2(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            FusedBatchNormGrad
            </summary>
            <param name="y_backprop">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="reserve_space_1">Input to the operation. </param>
            <param name="reserve_space_2">Input to the operation. </param>
            <param name="epsilon">epsilon</param>
            <param name="data_format">data format</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] x_backprop(type: DtInvalid).
            [1] scale_backprop(type: DtInvalid).
            [2] offset_backprop(type: DtInvalid).
            [3] reserve_space_3(type: DtInvalid).
            [4] reserve_space_4(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormGradV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            FusedBatchNormGradV2
            </summary>
            <param name="y_backprop">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="reserve_space_1">Input to the operation. </param>
            <param name="reserve_space_2">Input to the operation. </param>
            <param name="epsilon">epsilon</param>
            <param name="data_format">data format</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] x_backprop(type: DtInvalid).
            [1] scale_backprop(type: DtInvalid).
            [2] offset_backprop(type: DtInvalid).
            [3] reserve_space_3(type: DtInvalid).
            [4] reserve_space_4(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormGradV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            FusedBatchNormGradV3
            </summary>
            <param name="y_backprop">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="reserve_space_1">Input to the operation. </param>
            <param name="reserve_space_2">Input to the operation. </param>
            <param name="reserve_space_3">Input to the operation. </param>
            <param name="epsilon">epsilon</param>
            <param name="data_format">data format</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] x_backprop(type: DtInvalid).
            [1] scale_backprop(type: DtInvalid).
            [2] offset_backprop(type: DtInvalid).
            [3] reserve_space_4(type: DtInvalid).
            [4] reserve_space_5(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            FusedBatchNormV2
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="offset">Input to the operation. </param>
            <param name="mean">Input to the operation. </param>
            <param name="variance">Input to the operation. </param>
            <param name="epsilon">epsilon</param>
            <param name="data_format">data format</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] batch_mean(type: DtInvalid).
            [2] batch_variance(type: DtInvalid).
            [3] reserve_space_1(type: DtInvalid).
            [4] reserve_space_2(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedBatchNormV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String,System.Boolean,System.String)">
            <summary>
            FusedBatchNormV3
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="offset">Input to the operation. </param>
            <param name="mean">Input to the operation. </param>
            <param name="variance">Input to the operation. </param>
            <param name="epsilon">epsilon</param>
            <param name="data_format">data format</param>
            <param name="is_training">is training</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] batch_mean(type: DtInvalid).
            [2] batch_variance(type: DtInvalid).
            [3] reserve_space_1(type: DtInvalid).
            [4] reserve_space_2(type: DtInvalid).
            [5] reserve_space_3(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedPadConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Int64[],System.String,System.String)">
            <summary>
            FusedPadConv2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="mode">mode</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.FusedResizeAndPadConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Int64[],System.String,System.Boolean,System.String)">
            <summary>
            FusedResizeAndPadConv2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="mode">mode</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="resize_align_corners">resize align corners</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Gather(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Gather
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GatherNd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            GatherNd
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GatherV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            GatherV2
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="batch_dims">batch dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GenerateVocabRemapping(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            GenerateVocabRemapping
            </summary>
            <param name="new_vocab_file">Input to the operation. </param>
            <param name="old_vocab_file">Input to the operation. </param>
            <param name="new_vocab_offset">new vocab offset</param>
            <param name="num_new_vocab">num new vocab</param>
            <param name="old_vocab_size">old vocab size</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] remapping(type: DtInt64).
            [1] num_present(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GeneratorDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            GeneratorDataset
            </summary>
            <param name="init_func_other_args">Input to the operation. </param>
            <param name="next_func_other_args">Input to the operation. </param>
            <param name="finalize_func_other_args">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GetSessionHandle(Emgu.TF.Output,System.String)">
            <summary>
            GetSessionHandle
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GetSessionHandleV2(Emgu.TF.Output,System.String)">
            <summary>
            GetSessionHandleV2
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GetSessionTensor(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            GetSessionTensor
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Greater(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Greater
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GreaterEqual(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            GreaterEqual
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.GuaranteeConst(Emgu.TF.Output,System.String)">
            <summary>
            GuaranteeConst
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HashTable(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            HashTable
            </summary>
            <param name="key_dtype">key dtype</param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HashTableV2(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            HashTableV2
            </summary>
            <param name="key_dtype">key dtype</param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HistogramFixedWidth(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            HistogramFixedWidth
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="value_range">Input to the operation. </param>
            <param name="nbins">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HistogramSummary(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            HistogramSummary
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HostConst(Emgu.TF.Tensor,Emgu.TF.DataType,System.String)">
            <summary>
            HostConst
            </summary>
            <param name="value">value</param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.HSVToRGB(Emgu.TF.Output,System.String)">
            <summary>
            HSVToRGB
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Identity(Emgu.TF.Output,System.String)">
            <summary>
            Identity
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IdentityN(Emgu.TF.Output,System.String)">
            <summary>
            IdentityN
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IdentityReader(System.String,System.String,System.String)">
            <summary>
            IdentityReader
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IdentityReaderV2(System.String,System.String,System.String)">
            <summary>
            IdentityReaderV2
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.If(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            If
            </summary>
            <param name="cond">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IFFT(Emgu.TF.Output,System.String)">
            <summary>
            IFFT
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IFFT2D(Emgu.TF.Output,System.String)">
            <summary>
            IFFT2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IFFT3D(Emgu.TF.Output,System.String)">
            <summary>
            IFFT3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Igamma(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Igamma
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Igammac(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Igammac
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IgammaGradA(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            IgammaGradA
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Imag(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Imag
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ImageSummary(Emgu.TF.Output,Emgu.TF.Output,System.Int64,Emgu.TF.Tensor,System.String)">
            <summary>
            ImageSummary
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="max_images">max images</param>
            <param name="bad_color">bad color</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ImmutableConst(Emgu.TF.DataType,System.Int64[],System.String,System.String)">
            <summary>
            ImmutableConst
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="memory_region_name">memory region name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ImportEvent(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ImportEvent
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="tfEvent">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InfeedDequeue(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            InfeedDequeue
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InfeedDequeueTuple(Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            InfeedDequeueTuple
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="shapes">shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InfeedEnqueue(Emgu.TF.Output,System.Int64[],System.Int64[],System.Int64,System.String)">
            <summary>
            InfeedEnqueue
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="layout">layout</param>
            <param name="device_ordinal">device ordinal</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InfeedEnqueuePrelinearizedBuffer(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            InfeedEnqueuePrelinearizedBuffer
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="device_ordinal">device ordinal</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InfeedEnqueueTuple(Emgu.TF.Output,System.Int64[][],System.Int64[],System.Int64,System.String)">
            <summary>
            InfeedEnqueueTuple
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="shapes">shapes</param>
            <param name="layouts">layouts</param>
            <param name="device_ordinal">device ordinal</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTable(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InitializeTable
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTableFromTextFile(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            InitializeTableFromTextFile
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="key_index">key index</param>
            <param name="value_index">value index</param>
            <param name="vocab_size">vocab size</param>
            <param name="delimiter">delimiter</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTableFromTextFileV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            InitializeTableFromTextFileV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="filename">Input to the operation. </param>
            <param name="key_index">key index</param>
            <param name="value_index">value index</param>
            <param name="vocab_size">vocab size</param>
            <param name="delimiter">delimiter</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InitializeTableV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InitializeTableV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.InplaceAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InplaceAdd
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="i">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InplaceSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InplaceSub
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="i">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InplaceUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InplaceUpdate
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="i">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InterleaveDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            InterleaveDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="cycle_length">Input to the operation. </param>
            <param name="block_length">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InTopK(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            InTopK
            </summary>
            <param name="predictions">Input to the operation. </param>
            <param name="targets">Input to the operation. </param>
            <param name="k">k</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] precision(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InTopKV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InTopKV2
            </summary>
            <param name="predictions">Input to the operation. </param>
            <param name="targets">Input to the operation. </param>
            <param name="k">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] precision(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Inv(Emgu.TF.Output,System.String)">
            <summary>
            Inv
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Invert(Emgu.TF.Output,System.String)">
            <summary>
            Invert
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InvertPermutation(Emgu.TF.Output,System.String)">
            <summary>
            InvertPermutation
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.InvGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            InvGrad
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IRFFT(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            IRFFT
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IRFFT2D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            IRFFT2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IRFFT3D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            IRFFT3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsBoostedTreesEnsembleInitialized(Emgu.TF.Output,System.String)">
            <summary>
            IsBoostedTreesEnsembleInitialized
            </summary>
            <param name="tree_ensemble_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsBoostedTreesQuantileStreamResourceInitialized(Emgu.TF.Output,System.String)">
            <summary>
            IsBoostedTreesQuantileStreamResourceInitialized
            </summary>
            <param name="quantile_stream_resource_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsFinite(Emgu.TF.Output,System.String)">
            <summary>
            IsFinite
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsInf(Emgu.TF.Output,System.String)">
            <summary>
            IsInf
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsNan(Emgu.TF.Output,System.String)">
            <summary>
            IsNan
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IsVariableInitialized(Emgu.TF.Output,System.String)">
            <summary>
            IsVariableInitialized
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Iterator(System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            Iterator
            </summary>
            <param name="shared_name">shared name</param>
            <param name="container">container</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorFromStringHandle(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            IteratorFromStringHandle
            </summary>
            <param name="string_handle">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorFromStringHandleV2(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            IteratorFromStringHandleV2
            </summary>
            <param name="string_handle">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorGetNext(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            IteratorGetNext
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorGetNextAsOptional(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            IteratorGetNextAsOptional
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] optional(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorGetNextSync(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            IteratorGetNextSync
            </summary>
            <param name="iterator">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorToStringHandle(Emgu.TF.Output,System.String)">
            <summary>
            IteratorToStringHandle
            </summary>
            <param name="resource_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] string_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.IteratorV2(System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            IteratorV2
            </summary>
            <param name="shared_name">shared name</param>
            <param name="container">container</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.KMC2ChainInitialization(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            KMC2ChainInitialization
            </summary>
            <param name="distances">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] index(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.KmeansPlusPlusInitialization(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            KmeansPlusPlusInitialization
            </summary>
            <param name="points">Input to the operation. </param>
            <param name="num_to_sample">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="num_retries_per_sample">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] samples(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.L2Loss(Emgu.TF.Output,System.String)">
            <summary>
            L2Loss
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LeakyRelu(Emgu.TF.Output,System.Single,System.String)">
            <summary>
            LeakyRelu
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="alpha">alpha</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LeakyReluGrad(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String)">
            <summary>
            LeakyReluGrad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="alpha">alpha</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LearnedUnigramCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            LearnedUnigramCandidateSampler
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="num_sampled">num sampled</param>
            <param name="unique">unique</param>
            <param name="range_max">range max</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LeftShift(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LeftShift
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Less(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Less
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LessEqual(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LessEqual
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Lgamma(Emgu.TF.Output,System.String)">
            <summary>
            Lgamma
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LinSpace(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LinSpace
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="stop">Input to the operation. </param>
            <param name="num">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ListDiff(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            ListDiff
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="out_idx">out idx</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            [1] idx(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LMDBReader(System.String,System.String,System.String)">
            <summary>
            LMDBReader
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LoadAndRemapMatrix(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            LoadAndRemapMatrix
            </summary>
            <param name="ckpt_path">Input to the operation. </param>
            <param name="old_tensor_name">Input to the operation. </param>
            <param name="row_remapping">Input to the operation. </param>
            <param name="col_remapping">Input to the operation. </param>
            <param name="initializing_values">Input to the operation. </param>
            <param name="num_rows">num rows</param>
            <param name="num_cols">num cols</param>
            <param name="max_rows_in_memory">max rows in memory</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_matrix(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingAdadeltaParameters(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingAdadeltaParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingAdadeltaParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingAdadeltaParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingAdagradParameters(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingAdagradParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingAdagradParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingAdagradParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingADAMParameters(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingADAMParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="momenta">Input to the operation. </param>
            <param name="velocities">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingADAMParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingADAMParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="momenta">Input to the operation. </param>
            <param name="velocities">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingCenteredRMSPropParameters(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingCenteredRMSPropParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingFTRLParameters(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingFTRLParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="linears">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingFTRLParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingFTRLParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="linears">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingMDLAdagradLightParameters(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingMDLAdagradLightParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="weights">Input to the operation. </param>
            <param name="benefits">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingMomentumParameters(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingMomentumParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="momenta">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingMomentumParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingMomentumParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="momenta">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingProximalAdagradParameters(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingProximalAdagradParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingProximalAdagradParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="accumulators">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingRMSPropParameters(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingRMSPropParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingRMSPropParametersGradAccumDebug(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingRMSPropParametersGradAccumDebug
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="gradient_accumulators">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LoadTPUEmbeddingStochasticGradientDescentParameters(Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            LoadTPUEmbeddingStochasticGradientDescentParameters
            </summary>
            <param name="parameters">Input to the operation. </param>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Log(Emgu.TF.Output,System.String)">
            <summary>
            Log
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Log1p(Emgu.TF.Output,System.String)">
            <summary>
            Log1p
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogicalAnd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LogicalAnd
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogicalNot(Emgu.TF.Output,System.String)">
            <summary>
            LogicalNot
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogicalOr(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LogicalOr
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogMatrixDeterminant(Emgu.TF.Output,System.String)">
            <summary>
            LogMatrixDeterminant
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sign(type: DtInvalid).
            [1] log_abs_determinant(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogSoftmax(Emgu.TF.Output,System.String)">
            <summary>
            LogSoftmax
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] logsoftmax(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LogUniformCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            LogUniformCandidateSampler
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="num_sampled">num sampled</param>
            <param name="unique">unique</param>
            <param name="range_max">range max</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableExport(Emgu.TF.Output,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            LookupTableExport
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="Tkeys">Tkeys</param>
            <param name="Tvalues">Tvalues</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtInvalid).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableExportV2(Emgu.TF.Output,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            LookupTableExportV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="Tkeys">Tkeys</param>
            <param name="Tvalues">Tvalues</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtInvalid).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableFind(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableFind
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableFindV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableFindV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableImport(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableImport
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableImportV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableImportV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableInsert(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableInsert
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableInsertV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableInsertV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableRemoveV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            LookupTableRemoveV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="keys">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableSize(Emgu.TF.Output,System.String)">
            <summary>
            LookupTableSize
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LookupTableSizeV2(Emgu.TF.Output,System.String)">
            <summary>
            LookupTableSizeV2
            </summary>
            <param name="table_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LoopCond(Emgu.TF.Output,System.String)">
            <summary>
            LoopCond
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LowerBound(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            LowerBound
            </summary>
            <param name="sorted_inputs">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LRN(Emgu.TF.Output,System.Int64,System.Single,System.Single,System.Single,System.String)">
            <summary>
            LRN
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="depth_radius">depth radius</param>
            <param name="bias">bias</param>
            <param name="alpha">alpha</param>
            <param name="beta">beta</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.LRNGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Single,System.Single,System.Single,System.String)">
            <summary>
            LRNGrad
            </summary>
            <param name="input_grads">Input to the operation. </param>
            <param name="input_image">Input to the operation. </param>
            <param name="output_image">Input to the operation. </param>
            <param name="depth_radius">depth radius</param>
            <param name="bias">bias</param>
            <param name="alpha">alpha</param>
            <param name="beta">beta</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Lu(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Lu
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="output_idx_type">output idx type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] lu(type: DtInvalid).
            [1] p(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MakeIterator(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            MakeIterator
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="iterator">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MapClear(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapClear
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.Boolean,System.String)">
            <summary>
            MapDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="use_inter_op_parallelism">use inter op parallelism</param>
            <param name="preserve_cardinality">preserve cardinality</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapDefun(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String)">
            <summary>
            MapDefun
            </summary>
            <param name="arguments">Input to the operation. </param>
            <param name="captured_inputs">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="max_intra_op_parallelism">max intra op parallelism</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapIncompleteSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapIncompleteSize
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapPeek(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapPeek
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapSize
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapStage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapStage
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.MapUnstage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapUnstage
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MapUnstageNoKey(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            MapUnstageNoKey
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtInt64).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatchingFiles(Emgu.TF.Output,System.String)">
            <summary>
            MatchingFiles
            </summary>
            <param name="pattern">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filenames(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatMul(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            MatMul
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="transpose_a">transpose a</param>
            <param name="transpose_b">transpose b</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixBandPart(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            MatrixBandPart
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_lower">Input to the operation. </param>
            <param name="num_upper">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] band(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixDeterminant(Emgu.TF.Output,System.String)">
            <summary>
            MatrixDeterminant
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixDiag(Emgu.TF.Output,System.String)">
            <summary>
            MatrixDiag
            </summary>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixDiagPart(Emgu.TF.Output,System.String)">
            <summary>
            MatrixDiagPart
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] diagonal(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixExponential(Emgu.TF.Output,System.String)">
            <summary>
            MatrixExponential
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixInverse(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            MatrixInverse
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="adjoint">adjoint</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixLogarithm(Emgu.TF.Output,System.String)">
            <summary>
            MatrixLogarithm
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSetDiag(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            MatrixSetDiag
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="diagonal">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            MatrixSolve
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="adjoint">adjoint</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSolveLs(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            MatrixSolveLs
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="l2_regularizer">Input to the operation. </param>
            <param name="fast">fast</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixSquareRoot(Emgu.TF.Output,System.String)">
            <summary>
            MatrixSquareRoot
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MatrixTriangularSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            MatrixTriangularSolve
            </summary>
            <param name="matrix">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="lower">lower</param>
            <param name="adjoint">adjoint</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Max(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Max
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Maximum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Maximum
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            MaxPool
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool3D(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            MaxPool3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool3DGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            MaxPool3DGrad
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPool3DGradGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            MaxPool3DGradGrad
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            MaxPoolGrad
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String,System.String)">
            <summary>
            MaxPoolGradGrad
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradGradV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            MaxPoolGradGradV2
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradGradWithArgmax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.Boolean,System.String)">
            <summary>
            MaxPoolGradGradWithArgmax
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="argmax">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="include_batch_in_index">include batch in index</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            MaxPoolGradV2
            </summary>
            <param name="orig_input">Input to the operation. </param>
            <param name="orig_output">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="ksize">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolGradWithArgmax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.Boolean,System.String)">
            <summary>
            MaxPoolGradWithArgmax
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="argmax">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="include_batch_in_index">include batch in index</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            MaxPoolV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="padding">padding</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MaxPoolWithArgmax(Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Boolean,System.String)">
            <summary>
            MaxPoolWithArgmax
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="Targmax">Targmax</param>
            <param name="include_batch_in_index">include batch in index</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] argmax(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mean(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Mean
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Merge(Emgu.TF.Output,System.String)">
            <summary>
            Merge
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] value_index(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MergeSummary(Emgu.TF.Output,System.String)">
            <summary>
            MergeSummary
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MergeV2Checkpoints(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            MergeV2Checkpoints
            </summary>
            <param name="checkpoint_prefixes">Input to the operation. </param>
            <param name="destination_prefix">Input to the operation. </param>
            <param name="delete_old_dirs">delete old dirs</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Mfcc(Emgu.TF.Output,Emgu.TF.Output,System.Single,System.Single,System.Int64,System.Int64,System.String)">
            <summary>
            Mfcc
            </summary>
            <param name="spectrogram">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="upper_frequency_limit">upper frequency limit</param>
            <param name="lower_frequency_limit">lower frequency limit</param>
            <param name="filterbank_channel_count">filterbank channel count</param>
            <param name="dct_coefficient_count">dct coefficient count</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Min(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Min
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Minimum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Minimum
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MirrorPad(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            MirrorPad
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="mode">mode</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MirrorPadGrad(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            MirrorPadGrad
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="mode">mode</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mod(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Mod
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ModelDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String)">
            <summary>
            ModelDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="cpu_budget">cpu budget</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Mul(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Mul
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MulNoNan(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            MulNoNan
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIterator(System.String[],System.String,System.String,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            MultiDeviceIterator
            </summary>
            <param name="devices">devices</param>
            <param name="shared_name">shared name</param>
            <param name="container">container</param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorFromStringHandle(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            MultiDeviceIteratorFromStringHandle
            </summary>
            <param name="string_handle">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] multi_device_iterator(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorGetNextFromShard(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            MultiDeviceIteratorGetNextFromShard
            </summary>
            <param name="multi_device_iterator">Input to the operation. </param>
            <param name="shard_num">Input to the operation. </param>
            <param name="incarnation_id">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorInit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            MultiDeviceIteratorInit
            </summary>
            <param name="dataset">Input to the operation. </param>
            <param name="multi_device_iterator">Input to the operation. </param>
            <param name="max_buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] incarnation_id(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MultiDeviceIteratorToStringHandle(Emgu.TF.Output,System.String)">
            <summary>
            MultiDeviceIteratorToStringHandle
            </summary>
            <param name="multi_device_iterator">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] string_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Multinomial(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Multinomial
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="num_samples">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="output_dtype">output dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableDenseHashTable(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.Int64,System.Single,System.String)">
            <summary>
            MutableDenseHashTable
            </summary>
            <param name="empty_key">Input to the operation. </param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="value_shape">value shape</param>
            <param name="initial_num_buckets">initial num buckets</param>
            <param name="max_load_factor">max load factor</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableDenseHashTableV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.Int64,System.Single,System.String)">
            <summary>
            MutableDenseHashTableV2
            </summary>
            <param name="empty_key">Input to the operation. </param>
            <param name="deleted_key">Input to the operation. </param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="value_shape">value shape</param>
            <param name="initial_num_buckets">initial num buckets</param>
            <param name="max_load_factor">max load factor</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTable(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            MutableHashTable
            </summary>
            <param name="key_dtype">key dtype</param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTableOfTensors(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.String)">
            <summary>
            MutableHashTableOfTensors
            </summary>
            <param name="key_dtype">key dtype</param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="value_shape">value shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTableOfTensorsV2(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.Int64[],System.String)">
            <summary>
            MutableHashTableOfTensorsV2
            </summary>
            <param name="key_dtype">key dtype</param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="value_shape">value shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutableHashTableV2(Emgu.TF.DataType,Emgu.TF.DataType,System.String,System.String,System.Boolean,System.String)">
            <summary>
            MutableHashTableV2
            </summary>
            <param name="key_dtype">key dtype</param>
            <param name="value_dtype">value dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="use_node_name_sharing">use node name sharing</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] table_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutexLock(Emgu.TF.Output,System.String)">
            <summary>
            MutexLock
            </summary>
            <param name="mutex">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] mutex_lock(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.MutexV2(System.String,System.String,System.String)">
            <summary>
            MutexV2
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NcclAllReduce(Emgu.TF.Output,System.String,System.Int64,System.String,System.String)">
            <summary>
            NcclAllReduce
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction">reduction</param>
            <param name="num_devices">num devices</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NcclBroadcast(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            NcclBroadcast
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NcclReduce(Emgu.TF.Output,System.String,System.String)">
            <summary>
            NcclReduce
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction">reduction</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] data(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NearestNeighbors(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            NearestNeighbors
            </summary>
            <param name="points">Input to the operation. </param>
            <param name="centers">Input to the operation. </param>
            <param name="k">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] nearest_center_indices(type: DtInt64).
            [1] nearest_center_distances(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Neg(Emgu.TF.Output,System.String)">
            <summary>
            Neg
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NegTrain(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64,System.String)">
            <summary>
            NegTrain
            </summary>
            <param name="w_in">Input to the operation. </param>
            <param name="w_out">Input to the operation. </param>
            <param name="examples">Input to the operation. </param>
            <param name="labels">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="vocab_count">vocab count</param>
            <param name="num_negative_samples">num negative samples</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.NextAfter(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            NextAfter
            </summary>
            <param name="x1">Input to the operation. </param>
            <param name="x2">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NextIteration(Emgu.TF.Output,System.String)">
            <summary>
            NextIteration
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonDeterministicInts(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            NonDeterministicInts
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppression(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String)">
            <summary>
            NonMaxSuppression
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">iou threshold</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            NonMaxSuppressionV2
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            NonMaxSuppressionV3
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionV4(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            NonMaxSuppressionV4
            </summary>
            <param name="boxes">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="iou_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="pad_to_max_output_size">pad to max output size</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            [1] valid_outputs(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NonMaxSuppressionWithOverlaps(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            NonMaxSuppressionWithOverlaps
            </summary>
            <param name="overlaps">Input to the operation. </param>
            <param name="scores">Input to the operation. </param>
            <param name="max_output_size">Input to the operation. </param>
            <param name="overlap_threshold">Input to the operation. </param>
            <param name="score_threshold">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] selected_indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NoOp(System.String)">
            <summary>
            NoOp
            </summary>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.NotEqual(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            NotEqual
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.NthElement(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            NthElement
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="reverse">reverse</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OneHot(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            OneHot
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="depth">Input to the operation. </param>
            <param name="on_value">Input to the operation. </param>
            <param name="off_value">Input to the operation. </param>
            <param name="axis">axis</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OneShotIterator(Emgu.TF.DataType[],System.Int64[][],System.String,System.String,System.String)">
            <summary>
            OneShotIterator
            </summary>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OnesLike(Emgu.TF.Output,System.String)">
            <summary>
            OnesLike
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptimizeDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String[],System.String)">
            <summary>
            OptimizeDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="optimizations">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="optimization_configs">optimization configs</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalFromValue(Emgu.TF.Output,System.String)">
            <summary>
            OptionalFromValue
            </summary>
            <param name="components">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] optional(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalGetValue(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            OptionalGetValue
            </summary>
            <param name="optional">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalHasValue(Emgu.TF.Output,System.String)">
            <summary>
            OptionalHasValue
            </summary>
            <param name="optional">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] has_value(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OptionalNone(System.String)">
            <summary>
            OptionalNone
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] optional(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapClear(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapClear
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapIncompleteSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapIncompleteSize
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapPeek(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapPeek
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapSize
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapStage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapStage
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapUnstage(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapUnstage
            </summary>
            <param name="key">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OrderedMapUnstageNoKey(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            OrderedMapUnstageNoKey
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtInt64).
            [1] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OutfeedDequeue(Emgu.TF.DataType,System.Int64[],System.Int64,System.String)">
            <summary>
            OutfeedDequeue
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="device_ordinal">device ordinal</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OutfeedDequeueTuple(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String)">
            <summary>
            OutfeedDequeueTuple
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="shapes">shapes</param>
            <param name="device_ordinal">device ordinal</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.OutfeedEnqueue(Emgu.TF.Output,System.String)">
            <summary>
            OutfeedEnqueue
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.OutfeedEnqueueTuple(Emgu.TF.Output,System.String)">
            <summary>
            OutfeedEnqueueTuple
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Pack(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            Pack
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="axis">axis</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Pad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Pad
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddedBatchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            PaddedBatchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="padded_shapes">Input to the operation. </param>
            <param name="padding_values">Input to the operation. </param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddedBatchDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[][],System.Boolean,System.String)">
            <summary>
            PaddedBatchDatasetV2
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="batch_size">Input to the operation. </param>
            <param name="padded_shapes">Input to the operation. </param>
            <param name="padding_values">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_shapes">output shapes</param>
            <param name="parallel_copy">parallel copy</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddingFIFOQueue(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            PaddingFIFOQueue
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PaddingFIFOQueueV2(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String,System.String,System.String)">
            <summary>
            PaddingFIFOQueueV2
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PadV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            PadV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="constant_values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelConcat(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            ParallelConcat
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelDynamicStitch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ParallelDynamicStitch
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] merged(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelInterleaveDatasetV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ParallelInterleaveDatasetV2
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="cycle_length">Input to the operation. </param>
            <param name="block_length">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="sloppy">sloppy</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParallelMapDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            ParallelMapDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="num_parallel_calls">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="use_inter_op_parallelism">use inter op parallelism</param>
            <param name="sloppy">sloppy</param>
            <param name="preserve_cardinality">preserve cardinality</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParameterizedTruncatedNormal(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            ParameterizedTruncatedNormal
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="means">Input to the operation. </param>
            <param name="stdevs">Input to the operation. </param>
            <param name="minvals">Input to the operation. </param>
            <param name="maxvals">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseExample(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ParseExample
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="names">Input to the operation. </param>
            <param name="sparse_keys">Input to the operation. </param>
            <param name="dense_keys">Input to the operation. </param>
            <param name="dense_defaults">Input to the operation. </param>
            <param name="sparse_types">sparse types</param>
            <param name="dense_shapes">dense shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shapes(type: DtInt64).
            [3] dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseSequenceExample(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String[],System.String[],System.String[],System.String[],System.String[],System.Int64,System.Int64,System.Int64,System.Int64,Emgu.TF.DataType[],Emgu.TF.DataType[],System.Int64[][],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ParseSequenceExample
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="debug_name">Input to the operation. </param>
            <param name="context_dense_defaults">Input to the operation. </param>
            <param name="feature_list_dense_missing_assumed_empty">feature list dense missing assumed empty</param>
            <param name="context_sparse_keys">context sparse keys</param>
            <param name="context_dense_keys">context dense keys</param>
            <param name="feature_list_sparse_keys">feature list sparse keys</param>
            <param name="feature_list_dense_keys">feature list dense keys</param>
            <param name="Ncontext_sparse">Ncontext sparse</param>
            <param name="Ncontext_dense">Ncontext dense</param>
            <param name="Nfeature_list_sparse">Nfeature list sparse</param>
            <param name="Nfeature_list_dense">Nfeature list dense</param>
            <param name="context_sparse_types">context sparse types</param>
            <param name="feature_list_dense_types">feature list dense types</param>
            <param name="context_dense_shapes">context dense shapes</param>
            <param name="feature_list_sparse_types">feature list sparse types</param>
            <param name="feature_list_dense_shapes">feature list dense shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] context_sparse_indices(type: DtInt64).
            [1] context_sparse_values(type: DtInvalid).
            [2] context_sparse_shapes(type: DtInt64).
            [3] context_dense_values(type: DtInvalid).
            [4] feature_list_sparse_indices(type: DtInt64).
            [5] feature_list_sparse_values(type: DtInvalid).
            [6] feature_list_sparse_shapes(type: DtInt64).
            [7] feature_list_dense_values(type: DtInvalid).
            [8] feature_list_dense_lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseSingleExample(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String[],System.String[],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ParseSingleExample
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="dense_defaults">Input to the operation. </param>
            <param name="num_sparse">num sparse</param>
            <param name="sparse_keys">sparse keys</param>
            <param name="dense_keys">dense keys</param>
            <param name="sparse_types">sparse types</param>
            <param name="dense_shapes">dense shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shapes(type: DtInt64).
            [3] dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseSingleSequenceExample(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],Emgu.TF.DataType[],System.Int64[][],Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ParseSingleSequenceExample
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="feature_list_dense_missing_assumed_empty">Input to the operation. </param>
            <param name="context_sparse_keys">Input to the operation. </param>
            <param name="context_dense_keys">Input to the operation. </param>
            <param name="feature_list_sparse_keys">Input to the operation. </param>
            <param name="feature_list_dense_keys">Input to the operation. </param>
            <param name="context_dense_defaults">Input to the operation. </param>
            <param name="debug_name">Input to the operation. </param>
            <param name="context_sparse_types">context sparse types</param>
            <param name="feature_list_dense_types">feature list dense types</param>
            <param name="context_dense_shapes">context dense shapes</param>
            <param name="feature_list_sparse_types">feature list sparse types</param>
            <param name="feature_list_dense_shapes">feature list dense shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] context_sparse_indices(type: DtInt64).
            [1] context_sparse_values(type: DtInvalid).
            [2] context_sparse_shapes(type: DtInt64).
            [3] context_dense_values(type: DtInvalid).
            [4] feature_list_sparse_indices(type: DtInt64).
            [5] feature_list_sparse_values(type: DtInvalid).
            [6] feature_list_sparse_shapes(type: DtInt64).
            [7] feature_list_dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ParseTensor(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            ParseTensor
            </summary>
            <param name="serialized">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PartitionedCall(Emgu.TF.Output,Emgu.TF.DataType[],System.String,System.String,System.String,System.String)">
            <summary>
            PartitionedCall
            </summary>
            <param name="args">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="config">config</param>
            <param name="config_proto">config proto</param>
            <param name="executor_type">executor type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Placeholder(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            Placeholder
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PlaceholderV2(Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            PlaceholderV2
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PlaceholderWithDefault(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            PlaceholderWithDefault
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Polygamma(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Polygamma
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PopulationCount(Emgu.TF.Output,System.String)">
            <summary>
            PopulationCount
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtUint8).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Pow(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Pow
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PrefetchDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Int64,System.String)">
            <summary>
            PrefetchDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="slack_period">slack period</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Prelinearize(Emgu.TF.Output,System.Int64[],System.Int64[],System.String)">
            <summary>
            Prelinearize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shape">shape</param>
            <param name="layout">layout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PrelinearizeTuple(Emgu.TF.Output,System.Int64[][],System.Int64[],System.String)">
            <summary>
            PrelinearizeTuple
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="shapes">shapes</param>
            <param name="layouts">layouts</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PreventGradient(Emgu.TF.Output,System.String,System.String)">
            <summary>
            PreventGradient
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="message">message</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Print(Emgu.TF.Output,Emgu.TF.Output,System.String,System.Int64,System.Int64,System.String)">
            <summary>
            Print
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="message">message</param>
            <param name="first_n">first n</param>
            <param name="summarize">summarize</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PrintV2(Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            PrintV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="output_stream">output stream</param>
            <param name="end">end</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.PriorityQueue(System.Int64[][],Emgu.TF.DataType[],System.Int64,System.String,System.String,System.String)">
            <summary>
            PriorityQueue
            </summary>
            <param name="shapes">shapes</param>
            <param name="component_types">component types</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PriorityQueueV2(System.Int64[][],Emgu.TF.DataType[],System.Int64,System.String,System.String,System.String)">
            <summary>
            PriorityQueueV2
            </summary>
            <param name="shapes">shapes</param>
            <param name="component_types">component types</param>
            <param name="capacity">capacity</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Prod(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Prod
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PyFunc(Emgu.TF.Output,System.String,Emgu.TF.DataType[],System.String)">
            <summary>
            PyFunc
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="token">token</param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.PyFuncStateless(Emgu.TF.Output,System.String,Emgu.TF.DataType[],System.String)">
            <summary>
            PyFuncStateless
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="token">token</param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Qr(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Qr
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="full_matrices">full matrices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] q(type: DtInvalid).
            [1] r(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeAndDequantize(Emgu.TF.Output,System.Boolean,System.Int64,System.Boolean,System.Single,System.Single,System.String)">
            <summary>
            QuantizeAndDequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="signed_input">signed input</param>
            <param name="num_bits">num bits</param>
            <param name="range_given">range given</param>
            <param name="input_min">input min</param>
            <param name="input_max">input max</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeAndDequantizeV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Int64,System.Boolean,System.String,System.String)">
            <summary>
            QuantizeAndDequantizeV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="signed_input">signed input</param>
            <param name="num_bits">num bits</param>
            <param name="range_given">range given</param>
            <param name="round_mode">round mode</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeAndDequantizeV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            QuantizeAndDequantizeV3
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="num_bits">Input to the operation. </param>
            <param name="signed_input">signed input</param>
            <param name="range_given">range given</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            QuantizedAdd
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="min_x">Input to the operation. </param>
            <param name="max_x">Input to the operation. </param>
            <param name="min_y">Input to the operation. </param>
            <param name="max_y">Input to the operation. </param>
            <param name="Toutput">Toutput</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            [1] min_z(type: DtFloat).
            [2] max_z(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedAvgPool(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            QuantizedAvgPool
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedBatchNormWithGlobalNormalization(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Single,System.Boolean,System.String)">
            <summary>
            QuantizedBatchNormWithGlobalNormalization
            </summary>
            <param name="t">Input to the operation. </param>
            <param name="t_min">Input to the operation. </param>
            <param name="t_max">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="m_min">Input to the operation. </param>
            <param name="m_max">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="v_min">Input to the operation. </param>
            <param name="v_max">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="beta_min">Input to the operation. </param>
            <param name="beta_max">Input to the operation. </param>
            <param name="gamma">Input to the operation. </param>
            <param name="gamma_min">Input to the operation. </param>
            <param name="gamma_max">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="variance_epsilon">variance epsilon</param>
            <param name="scale_after_normalization">scale after normalization</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result(type: DtInvalid).
            [1] result_min(type: DtFloat).
            [2] result_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedBiasAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            QuantizedBiasAdd
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_bias">Input to the operation. </param>
            <param name="max_bias">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_out(type: DtFloat).
            [2] max_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConcat(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            QuantizedConcat
            </summary>
            <param name="concat_dim">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="input_mins">Input to the operation. </param>
            <param name="input_maxes">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            QuantizedConv2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DAndRelu(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DAndRelu
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DAndReluAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DAndReluAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DPerChannel(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            QuantizedConv2DPerChannel
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBias(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBias
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBiasAndRelu(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBiasAndRelu
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBiasAndReluAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBiasAndReluAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBiasAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBiasAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBiasSignedSumAndReluAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBiasSignedSumAndReluAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="summand">Input to the operation. </param>
            <param name="min_summand">Input to the operation. </param>
            <param name="max_summand">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBiasSumAndRelu(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBiasSumAndRelu
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="summand">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedConv2DWithBiasSumAndReluAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.Int64[],System.String)">
            <summary>
            QuantizedConv2DWithBiasSumAndReluAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="summand">Input to the operation. </param>
            <param name="min_summand">Input to the operation. </param>
            <param name="max_summand">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="padding_list">padding list</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedDepthwiseConv2D(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            QuantizedDepthwiseConv2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedDepthwiseConv2DWithBias(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            QuantizedDepthwiseConv2DWithBias
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedDepthwiseConv2DWithBiasAndRelu(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            QuantizedDepthwiseConv2DWithBiasAndRelu
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.String,System.Nullable{Emgu.TF.DataType},System.Int64[],System.String)">
            <summary>
            QuantizedDepthwiseConv2DWithBiasAndReluAndRequantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="filter">Input to the operation. </param>
            <param name="bias">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="min_filter">Input to the operation. </param>
            <param name="max_filter">Input to the operation. </param>
            <param name="min_freezed_output">Input to the operation. </param>
            <param name="max_freezed_output">Input to the operation. </param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="out_type">out type</param>
            <param name="dilations">dilations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedInstanceNorm(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Single,System.Single,System.Single,System.Single,System.String)">
            <summary>
            QuantizedInstanceNorm
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="x_min">Input to the operation. </param>
            <param name="x_max">Input to the operation. </param>
            <param name="output_range_given">output range given</param>
            <param name="given_y_min">given y min</param>
            <param name="given_y_max">given y max</param>
            <param name="variance_epsilon">variance epsilon</param>
            <param name="min_separation">min separation</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] y_min(type: DtFloat).
            [2] y_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedMatMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.Boolean,System.Boolean,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            QuantizedMatMul
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="min_a">Input to the operation. </param>
            <param name="max_a">Input to the operation. </param>
            <param name="min_b">Input to the operation. </param>
            <param name="max_b">Input to the operation. </param>
            <param name="Toutput">Toutput</param>
            <param name="transpose_a">transpose a</param>
            <param name="transpose_b">transpose b</param>
            <param name="Tactivation">Tactivation</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            [1] min_out(type: DtFloat).
            [2] max_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedMaxPool(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64[],System.Int64[],System.String,System.String)">
            <summary>
            QuantizedMaxPool
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_input">Input to the operation. </param>
            <param name="max_input">Input to the operation. </param>
            <param name="ksize">ksize</param>
            <param name="strides">strides</param>
            <param name="padding">padding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] min_output(type: DtFloat).
            [2] max_output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            QuantizedMul
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="min_x">Input to the operation. </param>
            <param name="max_x">Input to the operation. </param>
            <param name="min_y">Input to the operation. </param>
            <param name="max_y">Input to the operation. </param>
            <param name="Toutput">Toutput</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            [1] min_z(type: DtFloat).
            [2] max_z(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeDownAndShrinkRange(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            QuantizeDownAndShrinkRange
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedRelu(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            QuantizedRelu
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="min_features">Input to the operation. </param>
            <param name="max_features">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            [1] min_activations(type: DtFloat).
            [2] max_activations(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedRelu6(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            QuantizedRelu6
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="min_features">Input to the operation. </param>
            <param name="max_features">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            [1] min_activations(type: DtFloat).
            [2] max_activations(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedReluX(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            QuantizedReluX
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="max_value">Input to the operation. </param>
            <param name="min_features">Input to the operation. </param>
            <param name="max_features">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            [1] min_activations(type: DtFloat).
            [2] max_activations(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedReshape(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            QuantizedReshape
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizedResizeBilinear(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            QuantizedResizeBilinear
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="min">Input to the operation. </param>
            <param name="max">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtInvalid).
            [1] out_min(type: DtFloat).
            [2] out_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QuantizeV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            QuantizeV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="min_range">Input to the operation. </param>
            <param name="max_range">Input to the operation. </param>
            <param name="T">T</param>
            <param name="mode">mode</param>
            <param name="round_mode">round mode</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueClose(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            QueueClose
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="cancel_pending_enqueues">cancel pending enqueues</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueCloseV2(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            QueueCloseV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="cancel_pending_enqueues">cancel pending enqueues</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeue(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            QueueDequeue
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueMany(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            QueueDequeueMany
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueManyV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            QueueDequeueManyV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueUpTo(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            QueueDequeueUpTo
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueUpToV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            QueueDequeueUpToV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="n">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueDequeueV2(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.String)">
            <summary>
            QueueDequeueV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="component_types">component types</param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueue(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            QueueEnqueue
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueueMany(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            QueueEnqueueMany
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueueManyV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            QueueEnqueueManyV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueEnqueueV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            QueueEnqueueV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="components">Input to the operation. </param>
            <param name="timeout_ms">timeout ms</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.QueueIsClosed(Emgu.TF.Output,System.String)">
            <summary>
            QueueIsClosed
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_closed(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueIsClosedV2(Emgu.TF.Output,System.String)">
            <summary>
            QueueIsClosedV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_closed(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueSize(Emgu.TF.Output,System.String)">
            <summary>
            QueueSize
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.QueueSizeV2(Emgu.TF.Output,System.String)">
            <summary>
            QueueSizeV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RaggedGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            RaggedGather
            </summary>
            <param name="params_nested_splits">Input to the operation. </param>
            <param name="params_dense_values">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="OUTPUT_RAGGED_RANK">OUTPUT RAGGED RANK</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_nested_splits(type: DtInvalid).
            [1] output_dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RaggedRange(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            RaggedRange
            </summary>
            <param name="starts">Input to the operation. </param>
            <param name="limits">Input to the operation. </param>
            <param name="deltas">Input to the operation. </param>
            <param name="Tsplits">Tsplits</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] rt_nested_splits(type: DtInvalid).
            [1] rt_dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RaggedTensorFromVariant(Emgu.TF.Output,System.Int64,System.Int64,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            RaggedTensorFromVariant
            </summary>
            <param name="encoded_ragged">Input to the operation. </param>
            <param name="input_ragged_rank">input ragged rank</param>
            <param name="output_ragged_rank">output ragged rank</param>
            <param name="Tvalues">Tvalues</param>
            <param name="Tsplits">Tsplits</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_nested_splits(type: DtInvalid).
            [1] output_dense_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RaggedTensorToSparse(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RaggedTensorToSparse
            </summary>
            <param name="rt_nested_splits">Input to the operation. </param>
            <param name="rt_dense_values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_dense_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RaggedTensorToVariant(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            RaggedTensorToVariant
            </summary>
            <param name="rt_nested_splits">Input to the operation. </param>
            <param name="rt_dense_values">Input to the operation. </param>
            <param name="batched_input">batched input</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] encoded_ragged(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomCrop(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            RandomCrop
            </summary>
            <param name="image">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomGamma(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            RandomGamma
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomGammaGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RandomGammaGrad
            </summary>
            <param name="alpha">Input to the operation. </param>
            <param name="sample">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomPoisson(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            RandomPoisson
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="rate">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomPoissonV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            RandomPoissonV2
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="rate">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomShuffle(Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            RandomShuffle
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomShuffleQueue(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            RandomShuffleQueue
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="min_after_dequeue">min after dequeue</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomShuffleQueueV2(Emgu.TF.DataType[],System.Int64[][],System.Int64,System.Int64,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            RandomShuffleQueueV2
            </summary>
            <param name="component_types">component types</param>
            <param name="shapes">shapes</param>
            <param name="capacity">capacity</param>
            <param name="min_after_dequeue">min after dequeue</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomStandardNormal(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Int64,System.String)">
            <summary>
            RandomStandardNormal
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomUniform(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Int64,System.String)">
            <summary>
            RandomUniform
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RandomUniformInt(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            RandomUniformInt
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="minval">Input to the operation. </param>
            <param name="maxval">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Range(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Range
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="limit">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RangeDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            RangeDataset
            </summary>
            <param name="start">Input to the operation. </param>
            <param name="stop">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rank(Emgu.TF.Output,System.String)">
            <summary>
            Rank
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumRecordsProduced(Emgu.TF.Output,System.String)">
            <summary>
            ReaderNumRecordsProduced
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] records_produced(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumRecordsProducedV2(Emgu.TF.Output,System.String)">
            <summary>
            ReaderNumRecordsProducedV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] records_produced(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumWorkUnitsCompleted(Emgu.TF.Output,System.String)">
            <summary>
            ReaderNumWorkUnitsCompleted
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] units_completed(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderNumWorkUnitsCompletedV2(Emgu.TF.Output,System.String)">
            <summary>
            ReaderNumWorkUnitsCompletedV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] units_completed(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderRead(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReaderRead
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtString).
            [1] value(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReadUpTo(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReaderReadUpTo
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="num_records">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtString).
            [1] values(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReadUpToV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReaderReadUpToV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="num_records">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] keys(type: DtString).
            [1] values(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReadV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReaderReadV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="queue_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] key(type: DtString).
            [1] value(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderReset(Emgu.TF.Output,System.String)">
            <summary>
            ReaderReset
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderResetV2(Emgu.TF.Output,System.String)">
            <summary>
            ReaderResetV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderRestoreState(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReaderRestoreState
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="state">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderRestoreStateV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReaderRestoreStateV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="state">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderSerializeState(Emgu.TF.Output,System.String)">
            <summary>
            ReaderSerializeState
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] state(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReaderSerializeStateV2(Emgu.TF.Output,System.String)">
            <summary>
            ReaderSerializeStateV2
            </summary>
            <param name="reader_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] state(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReadFile(Emgu.TF.Output,System.String)">
            <summary>
            ReadFile
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] contents(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReadVariableOp(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            ReadVariableOp
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Real(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Real
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RealDiv(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RealDiv
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Reciprocal(Emgu.TF.Output,System.String)">
            <summary>
            Reciprocal
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReciprocalGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReciprocalGrad
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RecordInput(System.String,System.Int64,System.Single,System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RecordInput
            </summary>
            <param name="file_pattern">file pattern</param>
            <param name="file_random_seed">file random seed</param>
            <param name="file_shuffle_shift_ratio">file shuffle shift ratio</param>
            <param name="file_buffer_size">file buffer size</param>
            <param name="file_parallelism">file parallelism</param>
            <param name="batch_size">batch size</param>
            <param name="compression_type">compression type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] records(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RecvTPUEmbeddingActivations(System.Int64,System.String,System.String)">
            <summary>
            RecvTPUEmbeddingActivations
            </summary>
            <param name="num_outputs">num outputs</param>
            <param name="config">config</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReduceDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ReduceDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="initial_state">Input to the operation. </param>
            <param name="other_arguments">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="use_inter_op_parallelism">use inter op parallelism</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] components(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReduceJoin(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String,System.String)">
            <summary>
            ReduceJoin
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="separator">separator</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefEnter(Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            RefEnter
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="frame_name">frame name</param>
            <param name="is_constant">is constant</param>
            <param name="parallel_iterations">parallel iterations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefExit(Emgu.TF.Output,System.String)">
            <summary>
            RefExit
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefIdentity(Emgu.TF.Output,System.String)">
            <summary>
            RefIdentity
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefMerge(Emgu.TF.Output,System.String)">
            <summary>
            RefMerge
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] value_index(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefNextIteration(Emgu.TF.Output,System.String)">
            <summary>
            RefNextIteration
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefSelect(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RefSelect
            </summary>
            <param name="index">Input to the operation. </param>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RefSwitch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RefSwitch
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="pred">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_false(type: DtInvalid).
            [1] output_true(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RegexFullMatch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RegexFullMatch
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RegexReplace(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            RegexReplace
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern">Input to the operation. </param>
            <param name="rewrite">Input to the operation. </param>
            <param name="replace_global">replace global</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Relu(Emgu.TF.Output,System.String)">
            <summary>
            Relu
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Relu6(Emgu.TF.Output,System.String)">
            <summary>
            Relu6
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Relu6Grad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Relu6Grad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReluGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReluGrad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RemoteCall(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            RemoteCall
            </summary>
            <param name="target">Input to the operation. </param>
            <param name="args">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RemoteFusedGraphExecute(Emgu.TF.Output,Emgu.TF.DataType[],System.String,System.String)">
            <summary>
            RemoteFusedGraphExecute
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="Toutputs">Toutputs</param>
            <param name="serialized_remote_fused_graph_execute_info">serialized remote fused graph execute info</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RepeatDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            RepeatDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RequantizationRange(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RequantizationRange
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_min(type: DtFloat).
            [1] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RequantizationRangePerChannel(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Single,System.String)">
            <summary>
            RequantizationRangePerChannel
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="clip_value_max">clip value max</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_min(type: DtFloat).
            [1] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Requantize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            Requantize
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="requested_output_min">Input to the operation. </param>
            <param name="requested_output_max">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RequantizePerChannel(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            RequantizePerChannel
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_min">Input to the operation. </param>
            <param name="input_max">Input to the operation. </param>
            <param name="requested_output_min">Input to the operation. </param>
            <param name="requested_output_max">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            [1] output_min(type: DtFloat).
            [2] output_max(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Reshape(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Reshape
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeArea(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResizeArea
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBicubic(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResizeBicubic
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBicubicGrad(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResizeBicubicGrad
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="original_image">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBilinear(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResizeBilinear
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeBilinearGrad(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResizeBilinearGrad
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="original_image">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeNearestNeighbor(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResizeNearestNeighbor
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResizeNearestNeighborGrad(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResizeNearestNeighborGrad
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="align_corners">align corners</param>
            <param name="half_pixel_centers">half pixel centers</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyAdadelta
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceApplyAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="update_slots">update slots</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyAdagradDA
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdam(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceApplyAdam
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="beta2_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdaMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyAdaMax
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAdamWithAmsgrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyAdamWithAmsgrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="v">Input to the operation. </param>
            <param name="vhat">Input to the operation. </param>
            <param name="beta1_power">Input to the operation. </param>
            <param name="beta2_power">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="beta1">Input to the operation. </param>
            <param name="beta2">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyAddSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyAddSign
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyCenteredRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyFtrl
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyFtrlV2
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyGradientDescent
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyKerasMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceApplyKerasMomentum
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceApplyMomentum
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyPowerSign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyPowerSign
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="m">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="logbase">Input to the operation. </param>
            <param name="sign_decay">Input to the operation. </param>
            <param name="beta">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyProximalAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyProximalGradientDescent
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceApplyRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceCountUpTo(Emgu.TF.Output,System.Int64,Emgu.TF.DataType,System.String)">
            <summary>
            ResourceCountUpTo
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="limit">limit</param>
            <param name="T">T</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Boolean,System.String)">
            <summary>
            ResourceGather
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="batch_dims">batch dims</param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceGatherNd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            ResourceGatherNd
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterAdd
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterDiv(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterDiv
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterMax
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterMin(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterMin
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterMul
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterNdAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceScatterNdAdd
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterNdSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceScatterNdSub
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterNdUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceScatterNdUpdate
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterSub
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceScatterUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ResourceScatterUpdate
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyAdadelta
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="update_slots">update slots</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyAdagradDA
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyCenteredRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyFtrl
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyFtrlV2
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyKerasMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyKerasMomentum
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyMomentum
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyProximalAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyProximalGradientDescent
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceSparseApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ResourceSparseApplyRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ResourceStridedSliceAssign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            ResourceStridedSliceAssign
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="begin_mask">begin mask</param>
            <param name="end_mask">end mask</param>
            <param name="ellipsis_mask">ellipsis mask</param>
            <param name="new_axis_mask">new axis mask</param>
            <param name="shrink_axis_mask">shrink axis mask</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Restore(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.String)">
            <summary>
            Restore
            </summary>
            <param name="file_pattern">Input to the operation. </param>
            <param name="tensor_name">Input to the operation. </param>
            <param name="dt">dt</param>
            <param name="preferred_shard">preferred shard</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RestoreSlice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.String)">
            <summary>
            RestoreSlice
            </summary>
            <param name="file_pattern">Input to the operation. </param>
            <param name="tensor_name">Input to the operation. </param>
            <param name="shape_and_slice">Input to the operation. </param>
            <param name="dt">dt</param>
            <param name="preferred_shard">preferred shard</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RestoreV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            RestoreV2
            </summary>
            <param name="prefix">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="shape_and_slices">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensors(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingAdadeltaParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingAdadeltaParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] updates(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingAdadeltaParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] updates(type: DtFloat).
            [3] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingAdagradParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingAdagradParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingAdagradParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingAdagradParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingADAMParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingADAMParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] momenta(type: DtFloat).
            [2] velocities(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingADAMParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingADAMParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] momenta(type: DtFloat).
            [2] velocities(type: DtFloat).
            [3] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingCenteredRMSPropParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingCenteredRMSPropParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] ms(type: DtFloat).
            [2] mom(type: DtFloat).
            [3] mg(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingFTRLParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingFTRLParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] linears(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingFTRLParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingFTRLParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] linears(type: DtFloat).
            [3] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingMDLAdagradLightParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingMDLAdagradLightParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] weights(type: DtFloat).
            [3] benefits(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingMomentumParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingMomentumParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] momenta(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingMomentumParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingMomentumParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] momenta(type: DtFloat).
            [2] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingProximalAdagradParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingProximalAdagradParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingProximalAdagradParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] accumulators(type: DtFloat).
            [2] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingRMSPropParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingRMSPropParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] ms(type: DtFloat).
            [2] mom(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingRMSPropParametersGradAccumDebug
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            [1] ms(type: DtFloat).
            [2] mom(type: DtFloat).
            [3] gradient_accumulators(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RetrieveTPUEmbeddingStochasticGradientDescentParameters(System.Int64,System.Int64,System.Int64,System.String,System.String)">
            <summary>
            RetrieveTPUEmbeddingStochasticGradientDescentParameters
            </summary>
            <param name="num_shards">num shards</param>
            <param name="shard_id">shard id</param>
            <param name="table_id">table id</param>
            <param name="table_name">table name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] parameters(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Reverse(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Reverse
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="dims">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReverseSequence(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            ReverseSequence
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="seq_lengths">Input to the operation. </param>
            <param name="seq_dim">seq dim</param>
            <param name="batch_dim">batch dim</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ReverseV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ReverseV2
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RFFT(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RFFT
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RFFT2D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RFFT2D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RFFT3D(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RFFT3D
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="fft_length">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtComplex64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RGBToHSV(Emgu.TF.Output,System.String)">
            <summary>
            RGBToHSV
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RightShift(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RightShift
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rint(Emgu.TF.Output,System.String)">
            <summary>
            Rint
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RngSkip(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RngSkip
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="delta">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Roll(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Roll
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="shift">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Round(Emgu.TF.Output,System.String)">
            <summary>
            Round
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rpc(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            Rpc
            </summary>
            <param name="address">Input to the operation. </param>
            <param name="method">Input to the operation. </param>
            <param name="request">Input to the operation. </param>
            <param name="protocol">protocol</param>
            <param name="fail_fast">fail fast</param>
            <param name="timeout_in_ms">timeout in ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] response(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Rsqrt(Emgu.TF.Output,System.String)">
            <summary>
            Rsqrt
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.RsqrtGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            RsqrtGrad
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SampleDistortedBoundingBox(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Single,System.Single[],System.Single[],System.Int64,System.Boolean,System.String)">
            <summary>
            SampleDistortedBoundingBox
            </summary>
            <param name="image_size">Input to the operation. </param>
            <param name="bounding_boxes">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="min_object_covered">min object covered</param>
            <param name="aspect_ratio_range">aspect ratio range</param>
            <param name="area_range">area range</param>
            <param name="max_attempts">max attempts</param>
            <param name="use_image_if_no_bounding_boxes">use image if no bounding boxes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] begin(type: DtInvalid).
            [1] size(type: DtInvalid).
            [2] bboxes(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SampleDistortedBoundingBoxV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Single[],System.Single[],System.Int64,System.Boolean,System.String)">
            <summary>
            SampleDistortedBoundingBoxV2
            </summary>
            <param name="image_size">Input to the operation. </param>
            <param name="bounding_boxes">Input to the operation. </param>
            <param name="min_object_covered">Input to the operation. </param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="aspect_ratio_range">aspect ratio range</param>
            <param name="area_range">area range</param>
            <param name="max_attempts">max attempts</param>
            <param name="use_image_if_no_bounding_boxes">use image if no bounding boxes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] begin(type: DtInvalid).
            [1] size(type: DtInvalid).
            [2] bboxes(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SamplingDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            SamplingDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="rate">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Save(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Save
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SaveSlices(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SaveSlices
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="shapes_and_slices">Input to the operation. </param>
            <param name="data">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SaveV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SaveV2
            </summary>
            <param name="prefix">Input to the operation. </param>
            <param name="tensor_names">Input to the operation. </param>
            <param name="shape_and_slices">Input to the operation. </param>
            <param name="tensors">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.ScalarSummary(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ScalarSummary
            </summary>
            <param name="tags">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScaleAndTranslate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            ScaleAndTranslate
            </summary>
            <param name="images">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="translation">Input to the operation. </param>
            <param name="kernel_type">kernel type</param>
            <param name="antialias">antialias</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resized_images(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScaleAndTranslateGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            ScaleAndTranslateGrad
            </summary>
            <param name="grads">Input to the operation. </param>
            <param name="original_image">Input to the operation. </param>
            <param name="scale">Input to the operation. </param>
            <param name="translation">Input to the operation. </param>
            <param name="kernel_type">kernel type</param>
            <param name="antialias">antialias</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterAdd
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterDiv(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterDiv
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterMax
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterMin(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterMin
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterMul
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ScatterNd
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterNdAdd
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdNonAliasingAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ScatterNdNonAliasingAdd
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterNdSub
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterNdUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterNdUpdate
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterSub
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ScatterUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            ScatterUpdate
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaFprint(Emgu.TF.Output,System.String)">
            <summary>
            SdcaFprint
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaOptimizer(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            SdcaOptimizer
            </summary>
            <param name="sparse_example_indices">Input to the operation. </param>
            <param name="sparse_feature_indices">Input to the operation. </param>
            <param name="sparse_feature_values">Input to the operation. </param>
            <param name="dense_features">Input to the operation. </param>
            <param name="example_weights">Input to the operation. </param>
            <param name="example_labels">Input to the operation. </param>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_weights">Input to the operation. </param>
            <param name="dense_weights">Input to the operation. </param>
            <param name="example_state_data">Input to the operation. </param>
            <param name="loss_type">loss type</param>
            <param name="l1">l1</param>
            <param name="l2">l2</param>
            <param name="num_loss_partitions">num loss partitions</param>
            <param name="num_inner_iterations">num inner iterations</param>
            <param name="adaptative">adaptative</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out_example_state_data(type: DtFloat).
            [1] out_delta_sparse_weights(type: DtFloat).
            [2] out_delta_dense_weights(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaOptimizerV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Single,System.Single,System.Int64,System.Int64,System.Boolean,System.String)">
            <summary>
            SdcaOptimizerV2
            </summary>
            <param name="sparse_example_indices">Input to the operation. </param>
            <param name="sparse_feature_indices">Input to the operation. </param>
            <param name="sparse_feature_values">Input to the operation. </param>
            <param name="dense_features">Input to the operation. </param>
            <param name="example_weights">Input to the operation. </param>
            <param name="example_labels">Input to the operation. </param>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_weights">Input to the operation. </param>
            <param name="dense_weights">Input to the operation. </param>
            <param name="example_state_data">Input to the operation. </param>
            <param name="loss_type">loss type</param>
            <param name="l1">l1</param>
            <param name="l2">l2</param>
            <param name="num_loss_partitions">num loss partitions</param>
            <param name="num_inner_iterations">num inner iterations</param>
            <param name="adaptive">adaptive</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out_example_state_data(type: DtFloat).
            [1] out_delta_sparse_weights(type: DtFloat).
            [2] out_delta_dense_weights(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SdcaShrinkL1(Emgu.TF.Output,System.Single,System.Single,System.String)">
            <summary>
            SdcaShrinkL1
            </summary>
            <param name="weights">Input to the operation. </param>
            <param name="l1">l1</param>
            <param name="l2">l2</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentMax(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SegmentMax
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentMean(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SegmentMean
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentMin(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SegmentMin
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentProd(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SegmentProd
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SegmentSum(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SegmentSum
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Select(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Select
            </summary>
            <param name="condition">Input to the operation. </param>
            <param name="t">Input to the operation. </param>
            <param name="e">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SelectV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SelectV2
            </summary>
            <param name="condition">Input to the operation. </param>
            <param name="t">Input to the operation. </param>
            <param name="e">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SelfAdjointEig(Emgu.TF.Output,System.String)">
            <summary>
            SelfAdjointEig
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SelfAdjointEigV2(Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SelfAdjointEigV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_v">compute v</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] e(type: DtInvalid).
            [1] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Selu(Emgu.TF.Output,System.String)">
            <summary>
            Selu
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SeluGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SeluGrad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="outputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SendTPUEmbeddingGradients(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            SendTPUEmbeddingGradients
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="learning_rates">Input to the operation. </param>
            <param name="config">config</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeIterator(Emgu.TF.Output,System.String)">
            <summary>
            SerializeIterator
            </summary>
            <param name="resource_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeManySparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            SerializeManySparse
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized_sparse(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeSparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            SerializeSparse
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="sparse_shape">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized_sparse(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SerializeTensor(Emgu.TF.Output,System.String)">
            <summary>
            SerializeTensor
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] serialized(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SetSize(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SetSize
            </summary>
            <param name="set_indices">Input to the operation. </param>
            <param name="set_values">Input to the operation. </param>
            <param name="set_shape">Input to the operation. </param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Shape(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Shape
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShapeN(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            ShapeN
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShardDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ShardDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="num_shards">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="require_non_empty">require non empty</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShardedFilename(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ShardedFilename
            </summary>
            <param name="basename">Input to the operation. </param>
            <param name="shard">Input to the operation. </param>
            <param name="num_shards">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filename(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShardedFilespec(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            ShardedFilespec
            </summary>
            <param name="basename">Input to the operation. </param>
            <param name="num_shards">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] filename(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShuffleAndRepeatDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ShuffleAndRepeatDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShuffleDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.Boolean,System.String)">
            <summary>
            ShuffleDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="seed2">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="reshuffle_each_iteration">reshuffle each iteration</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ShutdownDistributedTPU(System.String)">
            <summary>
            ShutdownDistributedTPU
            </summary>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Sigmoid(Emgu.TF.Output,System.String)">
            <summary>
            Sigmoid
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SigmoidGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SigmoidGrad
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sign(Emgu.TF.Output,System.String)">
            <summary>
            Sign
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sin(Emgu.TF.Output,System.String)">
            <summary>
            Sin
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sinh(Emgu.TF.Output,System.String)">
            <summary>
            Sinh
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Size(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Size
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SkipDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            SkipDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Skipgram(System.String,System.Int64,System.Int64,System.Int64,System.Single,System.String)">
            <summary>
            Skipgram
            </summary>
            <param name="filename">filename</param>
            <param name="batch_size">batch size</param>
            <param name="window_size">window size</param>
            <param name="min_count">min count</param>
            <param name="subsample">subsample</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] vocab_word(type: DtString).
            [1] vocab_freq(type: DtInt32).
            [2] words_per_epoch(type: DtInt64).
            [3] current_epoch(type: DtInt32).
            [4] total_words_processed(type: DtInt64).
            [5] examples(type: DtInt32).
            [6] labels(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Slice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Slice
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Snapshot(Emgu.TF.Output,System.String)">
            <summary>
            Snapshot
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SnapshotDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            SnapshotDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="path">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Softmax(Emgu.TF.Output,System.String)">
            <summary>
            Softmax
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] softmax(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SoftmaxCrossEntropyWithLogits(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SoftmaxCrossEntropyWithLogits
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="labels">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] loss(type: DtInvalid).
            [1] backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Softplus(Emgu.TF.Output,System.String)">
            <summary>
            Softplus
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SoftplusGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SoftplusGrad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Softsign(Emgu.TF.Output,System.String)">
            <summary>
            Softsign
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] activations(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SoftsignGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SoftsignGrad
            </summary>
            <param name="gradients">Input to the operation. </param>
            <param name="features">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] backprops(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SpaceToBatch(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            SpaceToBatch
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="block_size">block size</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SpaceToBatchND(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SpaceToBatchND
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_shape">Input to the operation. </param>
            <param name="paddings">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SpaceToDepth(Emgu.TF.Output,System.Int64,System.String,System.String)">
            <summary>
            SpaceToDepth
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="block_size">block size</param>
            <param name="data_format">data format</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAccumulatorApplyGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseAccumulatorApplyGradient
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="local_step">Input to the operation. </param>
            <param name="gradient_indices">Input to the operation. </param>
            <param name="gradient_values">Input to the operation. </param>
            <param name="gradient_shape">Input to the operation. </param>
            <param name="has_known_shape">has known shape</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAccumulatorTakeGradient(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            SparseAccumulatorTakeGradient
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="num_required">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] values(type: DtInvalid).
            [2] shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseAdd
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="b_values">Input to the operation. </param>
            <param name="b_shape">Input to the operation. </param>
            <param name="thresh">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sum_indices(type: DtInt64).
            [1] sum_values(type: DtInvalid).
            [2] sum_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseAddGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseAddGrad
            </summary>
            <param name="backprop_val_grad">Input to the operation. </param>
            <param name="a_indices">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="sum_indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] a_val_grad(type: DtInvalid).
            [1] b_val_grad(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyAdadelta(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyAdadelta
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="accum_update">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            SparseApplyAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="update_slots">update slots</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyAdagradDA(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyAdagradDA
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="gradient_accumulator">Input to the operation. </param>
            <param name="gradient_squared_accumulator">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="global_step">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyCenteredRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyCenteredRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="mg">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyFtrl(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyFtrl
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyFtrlV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyFtrlV2
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="linear">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="l2_shrinkage">Input to the operation. </param>
            <param name="lr_power">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyMomentum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            SparseApplyMomentum
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="use_nesterov">use nesterov</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyProximalAdagrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyProximalAdagrad
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="accum">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyProximalGradientDescent(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyProximalGradientDescent
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="alpha">Input to the operation. </param>
            <param name="l1">Input to the operation. </param>
            <param name="l2">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseApplyRMSProp(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseApplyRMSProp
            </summary>
            <param name="var">Input to the operation. </param>
            <param name="ms">Input to the operation. </param>
            <param name="mom">Input to the operation. </param>
            <param name="lr">Input to the operation. </param>
            <param name="rho">Input to the operation. </param>
            <param name="momentum">Input to the operation. </param>
            <param name="epsilon">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="use_locking">use locking</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] out(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseConcat(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            SparseConcat
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shapes">Input to the operation. </param>
            <param name="concat_dim">concat dim</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseConditionalAccumulator(Emgu.TF.DataType,System.Int64[],System.String,System.String,System.String,System.String)">
            <summary>
            SparseConditionalAccumulator
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="reduction_type">reduction type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseCross(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Int64,System.Int64,Emgu.TF.DataType,Emgu.TF.DataType,System.String)">
            <summary>
            SparseCross
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shapes">Input to the operation. </param>
            <param name="dense_inputs">Input to the operation. </param>
            <param name="hashed_output">hashed output</param>
            <param name="num_buckets">num buckets</param>
            <param name="hash_key">hash key</param>
            <param name="out_type">out type</param>
            <param name="internal_type">internal type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseDenseCwiseAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseDenseCwiseAdd
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="dense">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseDenseCwiseDiv(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseDenseCwiseDiv
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="dense">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseDenseCwiseMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseDenseCwiseMul
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="dense">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseFillEmptyRows(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseFillEmptyRows
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dense_shape">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] empty_row_indicator(type: DtBool).
            [3] reverse_index_map(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseFillEmptyRowsGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseFillEmptyRowsGrad
            </summary>
            <param name="reverse_index_map">Input to the operation. </param>
            <param name="grad_values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] d_values(type: DtInvalid).
            [1] d_default_value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseMatMul(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            SparseMatMul
            </summary>
            <param name="a">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="transpose_a">transpose a</param>
            <param name="transpose_b">transpose b</param>
            <param name="a_is_sparse">a is sparse</param>
            <param name="b_is_sparse">b is sparse</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseReduceMax
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceMaxSparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseReduceMaxSparse
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceSum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseReduceSum
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReduceSumSparse(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseReduceSumSparse
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="reduction_axes">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReorder(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseReorder
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_values">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseReshape(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseReshape
            </summary>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_shape">Input to the operation. </param>
            <param name="new_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentMean(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentMean
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentMeanGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentMeanGrad
            </summary>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="output_dim0">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentMeanWithNumSegments(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentMeanWithNumSegments
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSqrtN(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentSqrtN
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSqrtNGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentSqrtNGrad
            </summary>
            <param name="grad">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="output_dim0">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSqrtNWithNumSegments(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentSqrtNWithNumSegments
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentSum
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSegmentSumWithNumSegments(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSegmentSumWithNumSegments
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSlice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSlice
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="start">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSliceGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSliceGrad
            </summary>
            <param name="backprop_val_grad">Input to the operation. </param>
            <param name="input_indices">Input to the operation. </param>
            <param name="input_start">Input to the operation. </param>
            <param name="output_indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] val_grad(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSoftmax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSoftmax
            </summary>
            <param name="sp_indices">Input to the operation. </param>
            <param name="sp_values">Input to the operation. </param>
            <param name="sp_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSoftmaxCrossEntropyWithLogits(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSoftmaxCrossEntropyWithLogits
            </summary>
            <param name="features">Input to the operation. </param>
            <param name="labels">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] loss(type: DtInvalid).
            [1] backprop(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSparseMaximum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSparseMaximum
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="b_values">Input to the operation. </param>
            <param name="b_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSparseMinimum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseSparseMinimum
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b_indices">Input to the operation. </param>
            <param name="b_values">Input to the operation. </param>
            <param name="b_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseSplit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            SparseSplit
            </summary>
            <param name="split_dim">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="num_split">num split</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_indices(type: DtInt64).
            [1] output_values(type: DtInvalid).
            [2] output_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseTensorDenseAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseTensorDenseAdd
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseTensorDenseMatMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            SparseTensorDenseMatMul
            </summary>
            <param name="a_indices">Input to the operation. </param>
            <param name="a_values">Input to the operation. </param>
            <param name="a_shape">Input to the operation. </param>
            <param name="b">Input to the operation. </param>
            <param name="adjoint_a">adjoint a</param>
            <param name="adjoint_b">adjoint b</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] product(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseTensorSliceDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SparseTensorSliceDataset
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="dense_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseToDense(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            SparseToDense
            </summary>
            <param name="sparse_indices">Input to the operation. </param>
            <param name="output_shape">Input to the operation. </param>
            <param name="sparse_values">Input to the operation. </param>
            <param name="default_value">Input to the operation. </param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] dense(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SparseToSparseSetOperation(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.String)">
            <summary>
            SparseToSparseSetOperation
            </summary>
            <param name="set1_indices">Input to the operation. </param>
            <param name="set1_values">Input to the operation. </param>
            <param name="set1_shape">Input to the operation. </param>
            <param name="set2_indices">Input to the operation. </param>
            <param name="set2_values">Input to the operation. </param>
            <param name="set2_shape">Input to the operation. </param>
            <param name="set_operation">set operation</param>
            <param name="validate_indices">validate indices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] result_indices(type: DtInt64).
            [1] result_values(type: DtInvalid).
            [2] result_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Split(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            Split
            </summary>
            <param name="split_dim">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="num_split">num split</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SplitV(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            SplitV
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="size_splits">Input to the operation. </param>
            <param name="split_dim">Input to the operation. </param>
            <param name="num_split">num split</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sqrt(Emgu.TF.Output,System.String)">
            <summary>
            Sqrt
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SqrtGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SqrtGrad
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Square(Emgu.TF.Output,System.String)">
            <summary>
            Square
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SquaredDifference(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            SquaredDifference
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Squeeze(Emgu.TF.Output,System.Int64[],System.String)">
            <summary>
            Squeeze
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="squeeze_dims">squeeze dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Stack(Emgu.TF.DataType,System.String,System.String)">
            <summary>
            Stack
            </summary>
            <param name="elem_type">elem type</param>
            <param name="stack_name">stack name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackClose(Emgu.TF.Output,System.String)">
            <summary>
            StackClose
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.StackCloseV2(Emgu.TF.Output,System.String)">
            <summary>
            StackCloseV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.StackPop(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            StackPop
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem_type">elem type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] elem(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPopV2(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            StackPopV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem_type">elem type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] elem(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPush(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            StackPush
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem">Input to the operation. </param>
            <param name="swap_memory">swap memory</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackPushV2(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            StackPushV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="elem">Input to the operation. </param>
            <param name="swap_memory">swap memory</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StackV2(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String)">
            <summary>
            StackV2
            </summary>
            <param name="max_size">Input to the operation. </param>
            <param name="elem_type">elem type</param>
            <param name="stack_name">stack name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Stage(Emgu.TF.Output,System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            Stage
            </summary>
            <param name="values">Input to the operation. </param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.StageClear(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            StageClear
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.StagePeek(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            StagePeek
            </summary>
            <param name="index">Input to the operation. </param>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StageSize(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            StageSize
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulPartitionedCall(Emgu.TF.Output,Emgu.TF.DataType[],System.String,System.String,System.String,System.String)">
            <summary>
            StatefulPartitionedCall
            </summary>
            <param name="args">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="config">config</param>
            <param name="config_proto">config proto</param>
            <param name="executor_type">executor type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulRandomBinomial(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatefulRandomBinomial
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="counts">Input to the operation. </param>
            <param name="probs">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulStandardNormal(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatefulStandardNormal
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulStandardNormalV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatefulStandardNormalV2
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulTruncatedNormal(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatefulTruncatedNormal
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulUniform(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatefulUniform
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulUniformFullInt(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatefulUniformFullInt
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatefulUniformInt(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            StatefulUniformInt
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="algorithm">Input to the operation. </param>
            <param name="shape">Input to the operation. </param>
            <param name="minval">Input to the operation. </param>
            <param name="maxval">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessIf(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            StatelessIf
            </summary>
            <param name="cond">Input to the operation. </param>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessMultinomial(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatelessMultinomial
            </summary>
            <param name="logits">Input to the operation. </param>
            <param name="num_samples">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="output_dtype">output dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessRandomNormal(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatelessRandomNormal
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessRandomUniform(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatelessRandomUniform
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessRandomUniformInt(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            StatelessRandomUniformInt
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="minval">Input to the operation. </param>
            <param name="maxval">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessTruncatedNormal(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StatelessTruncatedNormal
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="seed">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatelessWhile(Emgu.TF.Output,System.String)">
            <summary>
            StatelessWhile
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StaticRegexFullMatch(Emgu.TF.Output,System.String,System.String)">
            <summary>
            StaticRegexFullMatch
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern">pattern</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StaticRegexReplace(Emgu.TF.Output,System.String,System.String,System.Boolean,System.String)">
            <summary>
            StaticRegexReplace
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pattern">pattern</param>
            <param name="rewrite">rewrite</param>
            <param name="replace_global">replace global</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatsAggregatorHandleV2(System.String,System.String,System.String)">
            <summary>
            StatsAggregatorHandleV2
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StatsAggregatorSetSummaryWriter(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            StatsAggregatorSetSummaryWriter
            </summary>
            <param name="stats_aggregator">Input to the operation. </param>
            <param name="summary">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.StopGradient(Emgu.TF.Output,System.String)">
            <summary>
            StopGradient
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StridedSlice(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            StridedSlice
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="begin_mask">begin mask</param>
            <param name="end_mask">end mask</param>
            <param name="ellipsis_mask">ellipsis mask</param>
            <param name="new_axis_mask">new axis mask</param>
            <param name="shrink_axis_mask">shrink axis mask</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StridedSliceAssign(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            StridedSliceAssign
            </summary>
            <param name="reference">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="begin_mask">begin mask</param>
            <param name="end_mask">end mask</param>
            <param name="ellipsis_mask">ellipsis mask</param>
            <param name="new_axis_mask">new axis mask</param>
            <param name="shrink_axis_mask">shrink axis mask</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StridedSliceGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            StridedSliceGrad
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="begin_mask">begin mask</param>
            <param name="end_mask">end mask</param>
            <param name="ellipsis_mask">ellipsis mask</param>
            <param name="new_axis_mask">new axis mask</param>
            <param name="shrink_axis_mask">shrink axis mask</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringFormat(Emgu.TF.Output,System.String,System.String,System.Int64,System.String)">
            <summary>
            StringFormat
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="template">template</param>
            <param name="placeholder">placeholder</param>
            <param name="summarize">summarize</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringJoin(Emgu.TF.Output,System.String,System.String)">
            <summary>
            StringJoin
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="separator">separator</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringLength(Emgu.TF.Output,System.String,System.String)">
            <summary>
            StringLength
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="unit">unit</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringLower(Emgu.TF.Output,System.String,System.String)">
            <summary>
            StringLower
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="encoding">encoding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringSplit(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            StringSplit
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="delimiter">Input to the operation. </param>
            <param name="skip_empty">skip empty</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] values(type: DtString).
            [2] shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringSplitV2(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            StringSplitV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="sep">Input to the operation. </param>
            <param name="maxsplit">maxsplit</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] indices(type: DtInt64).
            [1] values(type: DtString).
            [2] shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringStrip(Emgu.TF.Output,System.String)">
            <summary>
            StringStrip
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToHashBucket(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            StringToHashBucket
            </summary>
            <param name="string_tensor">Input to the operation. </param>
            <param name="num_buckets">num buckets</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToHashBucketFast(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            StringToHashBucketFast
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_buckets">num buckets</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToHashBucketStrong(Emgu.TF.Output,System.Int64,System.Int64[],System.String)">
            <summary>
            StringToHashBucketStrong
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_buckets">num buckets</param>
            <param name="key">key</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringToNumber(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            StringToNumber
            </summary>
            <param name="string_tensor">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.StringUpper(Emgu.TF.Output,System.String,System.String)">
            <summary>
            StringUpper
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="encoding">encoding</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sub(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Sub
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Substr(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            Substr
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="pos">Input to the operation. </param>
            <param name="len">Input to the operation. </param>
            <param name="unit">unit</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Sum(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            Sum
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="reduction_indices">Input to the operation. </param>
            <param name="keep_dims">keep dims</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SummaryWriter(System.String,System.String,System.String)">
            <summary>
            SummaryWriter
            </summary>
            <param name="shared_name">shared name</param>
            <param name="container">container</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] writer(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Svd(Emgu.TF.Output,System.Boolean,System.Boolean,System.String)">
            <summary>
            Svd
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="compute_uv">compute uv</param>
            <param name="full_matrices">full matrices</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] s(type: DtInvalid).
            [1] u(type: DtInvalid).
            [2] v(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Switch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Switch
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="pred">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_false(type: DtInvalid).
            [1] output_true(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.SymbolicGradient(Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            SymbolicGradient
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TakeDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            TakeDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="count">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TakeManySparseFromTensorsMap(Emgu.TF.Output,Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            TakeManySparseFromTensorsMap
            </summary>
            <param name="sparse_handles">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sparse_indices(type: DtInt64).
            [1] sparse_values(type: DtInvalid).
            [2] sparse_shape(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Tan(Emgu.TF.Output,System.String)">
            <summary>
            Tan
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Tanh(Emgu.TF.Output,System.String)">
            <summary>
            Tanh
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TanhGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TanhGrad
            </summary>
            <param name="y">Input to the operation. </param>
            <param name="dy">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TemporaryVariable(System.Int64[],Emgu.TF.DataType,System.String,System.String)">
            <summary>
            TemporaryVariable
            </summary>
            <param name="shape">shape</param>
            <param name="dtype">dtype</param>
            <param name="var_name">var name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArray(Emgu.TF.Output,Emgu.TF.DataType,System.Boolean,System.Boolean,System.String,System.Int64[],System.String)">
            <summary>
            TensorArray
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="dynamic_size">dynamic size</param>
            <param name="clear_after_read">clear after read</param>
            <param name="tensor_array_name">tensor array name</param>
            <param name="element_shape">element shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayClose(Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayClose
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayCloseV2(Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayCloseV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayCloseV3(Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayCloseV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayConcat(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayConcat
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape_except0">element shape except0</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayConcatV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayConcatV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape_except0">element shape except0</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayConcatV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayConcatV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape_except0">element shape except0</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayGather
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape">element shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGatherV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayGatherV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape">element shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGatherV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayGatherV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape">element shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGrad(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            TensorArrayGrad
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="source">source</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGradV2(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            TensorArrayGradV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="source">source</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGradV3(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            TensorArrayGradV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="source">source</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtResource).
            [1] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayGradWithShape(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String)">
            <summary>
            TensorArrayGradWithShape
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="shape_to_prepend">Input to the operation. </param>
            <param name="source">source</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] grad_handle(type: DtResource).
            [1] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayPack(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorArrayPack
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape">element shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayRead(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorArrayRead
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayReadV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorArrayReadV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayReadV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorArrayReadV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] value(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayScatter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayScatter
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayScatterV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayScatterV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayScatterV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayScatterV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArraySize
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySizeV2(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArraySizeV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySizeV3(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArraySizeV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySplit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArraySplit
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySplitV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArraySplitV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArraySplitV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArraySplitV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayUnpack(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayUnpack
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayV2(Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            TensorArrayV2
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape">element shape</param>
            <param name="dynamic_size">dynamic size</param>
            <param name="clear_after_read">clear after read</param>
            <param name="tensor_array_name">tensor array name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayV3(Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.Boolean,System.Boolean,System.Boolean,System.String,System.String)">
            <summary>
            TensorArrayV3
            </summary>
            <param name="size">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="element_shape">element shape</param>
            <param name="dynamic_size">dynamic size</param>
            <param name="clear_after_read">clear after read</param>
            <param name="identical_element_shapes">identical element shapes</param>
            <param name="tensor_array_name">tensor array name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtResource).
            [1] flow(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayWrite(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayWrite
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayWriteV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayWriteV2
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorArrayWriteV3(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorArrayWriteV3
            </summary>
            <param name="handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="flow_in">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] flow_out(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorDataset(Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            TensorDataset
            </summary>
            <param name="components">Input to the operation. </param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestCreateTreeVariable(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorForestCreateTreeVariable
            </summary>
            <param name="tree_handle">Input to the operation. </param>
            <param name="tree_config">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestTreeDeserialize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorForestTreeDeserialize
            </summary>
            <param name="tree_handle">Input to the operation. </param>
            <param name="tree_config">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestTreeIsInitializedOp(Emgu.TF.Output,System.String)">
            <summary>
            TensorForestTreeIsInitializedOp
            </summary>
            <param name="tree_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestTreePredict(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            TensorForestTreePredict
            </summary>
            <param name="tree_handle">Input to the operation. </param>
            <param name="dense_features">Input to the operation. </param>
            <param name="logits_dimension">logits dimension</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] logits(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestTreeResourceHandleOp(System.String,System.String,System.String)">
            <summary>
            TensorForestTreeResourceHandleOp
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestTreeSerialize(Emgu.TF.Output,System.String)">
            <summary>
            TensorForestTreeSerialize
            </summary>
            <param name="tree_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tree_config(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorForestTreeSize(Emgu.TF.Output,System.String)">
            <summary>
            TensorForestTreeSize
            </summary>
            <param name="tree_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tree_size(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListConcat(Emgu.TF.Output,Emgu.TF.DataType,System.Int64[],System.String)">
            <summary>
            TensorListConcat
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="element_shape">element shape</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListConcatLists(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListConcatLists
            </summary>
            <param name="input_a">Input to the operation. </param>
            <param name="input_b">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListConcatV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListConcatV2
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="leading_dims">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            [1] lengths(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListElementShape(Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListElementShape
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="shape_type">shape type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] element_shape(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListFromTensor(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListFromTensor
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListGather(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListGather
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListGetItem(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListGetItem
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] item(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListLength(Emgu.TF.Output,System.String)">
            <summary>
            TensorListLength
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] length(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListPopBack(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListPopBack
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            [1] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListPushBack(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListPushBack
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListPushBackBatch(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListPushBackBatch
            </summary>
            <param name="input_handles">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handles(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListReserve(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.String)">
            <summary>
            TensorListReserve
            </summary>
            <param name="element_shape">Input to the operation. </param>
            <param name="num_elements">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListResize(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListResize
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListScatter(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListScatter
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListScatterIntoExistingList(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListScatterIntoExistingList
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListScatterV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListScatterV2
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="num_elements">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListSetItem(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListSetItem
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="index">Input to the operation. </param>
            <param name="item">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListSplit(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorListSplit
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="lengths">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorListStack(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.String)">
            <summary>
            TensorListStack
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="element_shape">Input to the operation. </param>
            <param name="element_dtype">element dtype</param>
            <param name="num_elements">num elements</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorScatterAdd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorScatterAdd
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorScatterSub(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorScatterSub
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorScatterUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorScatterUpdate
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="indices">Input to the operation. </param>
            <param name="updates">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorSliceDataset(Emgu.TF.Output,System.Int64[][],System.String)">
            <summary>
            TensorSliceDataset
            </summary>
            <param name="components">Input to the operation. </param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorStridedSliceUpdate(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            TensorStridedSliceUpdate
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="begin">Input to the operation. </param>
            <param name="end">Input to the operation. </param>
            <param name="strides">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="begin_mask">begin mask</param>
            <param name="end_mask">end mask</param>
            <param name="ellipsis_mask">ellipsis mask</param>
            <param name="new_axis_mask">new axis mask</param>
            <param name="shrink_axis_mask">shrink axis mask</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorSummary(Emgu.TF.Output,System.String,System.String[],System.String,System.String)">
            <summary>
            TensorSummary
            </summary>
            <param name="tensor">Input to the operation. </param>
            <param name="description">description</param>
            <param name="labels">labels</param>
            <param name="display_name">display name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TensorSummaryV2(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TensorSummaryV2
            </summary>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="serialized_summary_metadata">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] summary(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TextLineDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TextLineDataset
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TextLineReader(System.Int64,System.String,System.String,System.String)">
            <summary>
            TextLineReader
            </summary>
            <param name="skip_header_lines">skip header lines</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TextLineReaderV2(System.Int64,System.String,System.String,System.String)">
            <summary>
            TextLineReaderV2
            </summary>
            <param name="skip_header_lines">skip header lines</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TFRecordDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TFRecordDataset
            </summary>
            <param name="filenames">Input to the operation. </param>
            <param name="compression_type">Input to the operation. </param>
            <param name="buffer_size">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TFRecordReader(System.String,System.String,System.String,System.String)">
            <summary>
            TFRecordReader
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="compression_type">compression type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TFRecordReaderV2(System.String,System.String,System.String,System.String)">
            <summary>
            TFRecordReaderV2
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="compression_type">compression type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ThreadUnsafeUnigramCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            ThreadUnsafeUnigramCandidateSampler
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="num_sampled">num sampled</param>
            <param name="unique">unique</param>
            <param name="range_max">range max</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Tile(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Tile
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="multiples">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TileGrad(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TileGrad
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="multiples">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Timestamp(System.String)">
            <summary>
            Timestamp
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ts(type: DtDouble).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TopK(Emgu.TF.Output,System.Int64,System.Boolean,System.String)">
            <summary>
            TopK
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="k">k</param>
            <param name="sorted">sorted</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            [1] indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TopKV2(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            TopKV2
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="k">Input to the operation. </param>
            <param name="sorted">sorted</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            [1] indices(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUCompilationResult(System.String)">
            <summary>
            TPUCompilationResult
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUEmbeddingActivations(Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            TPUEmbeddingActivations
            </summary>
            <param name="embedding_variable">Input to the operation. </param>
            <param name="sliced_activations">Input to the operation. </param>
            <param name="table_id">table id</param>
            <param name="lookup_id">lookup id</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUOrdinalSelector(System.String)">
            <summary>
            TPUOrdinalSelector
            </summary>
            <param name="opName">The name of the operation</param>
            <return>
            [0] device_ordinals(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUPartitionedCall(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.String)">
            <summary>
            TPUPartitionedCall
            </summary>
            <param name="args">Input to the operation. </param>
            <param name="device_ordinal">Input to the operation. </param>
            <param name="Tout">Tout</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUReplicatedInput(Emgu.TF.Output,System.String)">
            <summary>
            TPUReplicatedInput
            </summary>
            <param name="inputs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUReplicatedOutput(Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            TPUReplicatedOutput
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="num_replicas">num replicas</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] outputs(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TPUReplicateMetadata(System.Int64,System.Int64,System.String,System.Boolean,System.Int64[],System.Int64[],System.String[],System.String[],System.String,System.String)">
            <summary>
            TPUReplicateMetadata
            </summary>
            <param name="num_replicas">num replicas</param>
            <param name="num_cores_per_replica">num cores per replica</param>
            <param name="topology">topology</param>
            <param name="use_tpu">use tpu</param>
            <param name="device_assignment">device assignment</param>
            <param name="computation_shape">computation shape</param>
            <param name="host_compute_core">host compute core</param>
            <param name="padding_map">padding map</param>
            <param name="step_marker_location">step marker location</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Transpose(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Transpose
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="perm">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TridiagonalMatMul(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TridiagonalMatMul
            </summary>
            <param name="superdiag">Input to the operation. </param>
            <param name="maindiag">Input to the operation. </param>
            <param name="subdiag">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TridiagonalSolve(Emgu.TF.Output,Emgu.TF.Output,System.Boolean,System.String)">
            <summary>
            TridiagonalSolve
            </summary>
            <param name="diagonals">Input to the operation. </param>
            <param name="rhs">Input to the operation. </param>
            <param name="partial_pivoting">partial pivoting</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TruncateDiv(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TruncateDiv
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TruncatedNormal(Emgu.TF.Output,Emgu.TF.DataType,System.Int64,System.Int64,System.String)">
            <summary>
            TruncatedNormal
            </summary>
            <param name="shape">Input to the operation. </param>
            <param name="dtype">dtype</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TruncateMod(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            TruncateMod
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.TryRpc(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.Boolean,System.Int64,System.String)">
            <summary>
            TryRpc
            </summary>
            <param name="address">Input to the operation. </param>
            <param name="method">Input to the operation. </param>
            <param name="request">Input to the operation. </param>
            <param name="protocol">protocol</param>
            <param name="fail_fast">fail fast</param>
            <param name="timeout_in_ms">timeout in ms</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] response(type: DtString).
            [1] status_code(type: DtInt32).
            [2] status_message(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unbatch(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String,System.String,System.String)">
            <summary>
            Unbatch
            </summary>
            <param name="batched_tensor">Input to the operation. </param>
            <param name="batch_index">Input to the operation. </param>
            <param name="id">Input to the operation. </param>
            <param name="timeout_micros">timeout micros</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] unbatched_tensor(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnbatchGrad(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.String)">
            <summary>
            UnbatchGrad
            </summary>
            <param name="original_input">Input to the operation. </param>
            <param name="batch_index">Input to the operation. </param>
            <param name="grad">Input to the operation. </param>
            <param name="id">Input to the operation. </param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] batched_grad(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnicodeDecode(Emgu.TF.Output,System.String,System.String,System.Int64,System.Boolean,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            UnicodeDecode
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_encoding">input encoding</param>
            <param name="errors">errors</param>
            <param name="replacement_char">replacement char</param>
            <param name="replace_control_characters">replace control characters</param>
            <param name="Tsplits">Tsplits</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] row_splits(type: DtInvalid).
            [1] char_values(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnicodeDecodeWithOffsets(Emgu.TF.Output,System.String,System.String,System.Int64,System.Boolean,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            UnicodeDecodeWithOffsets
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_encoding">input encoding</param>
            <param name="errors">errors</param>
            <param name="replacement_char">replacement char</param>
            <param name="replace_control_characters">replace control characters</param>
            <param name="Tsplits">Tsplits</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] row_splits(type: DtInvalid).
            [1] char_values(type: DtInt32).
            [2] char_to_byte_starts(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnicodeEncode(Emgu.TF.Output,Emgu.TF.Output,System.String,System.String,System.Int64,System.String)">
            <summary>
            UnicodeEncode
            </summary>
            <param name="input_values">Input to the operation. </param>
            <param name="input_splits">Input to the operation. </param>
            <param name="output_encoding">output encoding</param>
            <param name="errors">errors</param>
            <param name="replacement_char">replacement char</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnicodeScript(Emgu.TF.Output,System.String)">
            <summary>
            UnicodeScript
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInt32).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnicodeTranscode(Emgu.TF.Output,System.String,System.String,System.String,System.Int64,System.Boolean,System.String)">
            <summary>
            UnicodeTranscode
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="input_encoding">input encoding</param>
            <param name="output_encoding">output encoding</param>
            <param name="errors">errors</param>
            <param name="replacement_char">replacement char</param>
            <param name="replace_control_characters">replace control characters</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniformCandidateSampler(Emgu.TF.Output,System.Int64,System.Int64,System.Boolean,System.Int64,System.Int64,System.Int64,System.String)">
            <summary>
            UniformCandidateSampler
            </summary>
            <param name="true_classes">Input to the operation. </param>
            <param name="num_true">num true</param>
            <param name="num_sampled">num sampled</param>
            <param name="unique">unique</param>
            <param name="range_max">range max</param>
            <param name="seed">seed</param>
            <param name="seed2">seed2</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] sampled_candidates(type: DtInt64).
            [1] true_expected_count(type: DtFloat).
            [2] sampled_expected_count(type: DtFloat).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unique(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            Unique
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="out_idx">out idx</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniqueV2(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            UniqueV2
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="out_idx">out idx</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniqueWithCounts(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            UniqueWithCounts
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="out_idx">out idx</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            [2] count(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UniqueWithCountsV2(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            UniqueWithCountsV2
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="axis">Input to the operation. </param>
            <param name="out_idx">out idx</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            [1] idx(type: DtInvalid).
            [2] count(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unpack(Emgu.TF.Output,System.Int64,System.Int64,System.String)">
            <summary>
            Unpack
            </summary>
            <param name="value">Input to the operation. </param>
            <param name="num">num</param>
            <param name="axis">axis</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnravelIndex(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            UnravelIndex
            </summary>
            <param name="indices">Input to the operation. </param>
            <param name="dims">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentMax(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            UnsortedSegmentMax
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentMin(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            UnsortedSegmentMin
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentProd(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            UnsortedSegmentProd
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnsortedSegmentSum(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            UnsortedSegmentSum
            </summary>
            <param name="data">Input to the operation. </param>
            <param name="segment_ids">Input to the operation. </param>
            <param name="num_segments">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Unstage(Emgu.TF.DataType[],System.Int64,System.Int64,System.String,System.String,System.String)">
            <summary>
            Unstage
            </summary>
            <param name="dtypes">dtypes</param>
            <param name="capacity">capacity</param>
            <param name="memory_limit">memory limit</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] values(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UnwrapDatasetVariant(Emgu.TF.Output,System.String)">
            <summary>
            UnwrapDatasetVariant
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.UpperBound(Emgu.TF.Output,Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            UpperBound
            </summary>
            <param name="sorted_inputs">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.VarHandleOp(Emgu.TF.DataType,System.Int64[],System.String,System.String,System.String)">
            <summary>
            VarHandleOp
            </summary>
            <param name="dtype">dtype</param>
            <param name="shape">shape</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] resource(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Variable(System.Int64[],Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            Variable
            </summary>
            <param name="shape">shape</param>
            <param name="dtype">dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.VariableShape(Emgu.TF.Output,System.Nullable{Emgu.TF.DataType},System.String)">
            <summary>
            VariableShape
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="out_type">out type</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.VariableV2(System.Int64[],Emgu.TF.DataType,System.String,System.String,System.String)">
            <summary>
            VariableV2
            </summary>
            <param name="shape">shape</param>
            <param name="dtype">dtype</param>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] ref(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.VarIsInitializedOp(Emgu.TF.Output,System.String)">
            <summary>
            VarIsInitializedOp
            </summary>
            <param name="resource">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] is_initialized(type: DtBool).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Where(Emgu.TF.Output,System.String)">
            <summary>
            Where
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] index(type: DtInt64).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.While(Emgu.TF.Output,System.Int64[][],System.Int64,System.String)">
            <summary>
            While
            </summary>
            <param name="input">Input to the operation. </param>
            <param name="output_shapes">output shapes</param>
            <param name="parallel_iterations">parallel iterations</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WholeFileReader(System.String,System.String,System.String)">
            <summary>
            WholeFileReader
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WholeFileReaderV2(System.String,System.String,System.String)">
            <summary>
            WholeFileReaderV2
            </summary>
            <param name="container">container</param>
            <param name="shared_name">shared name</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] reader_handle(type: DtResource).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WindowDataset(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            WindowDataset
            </summary>
            <param name="input_dataset">Input to the operation. </param>
            <param name="size">Input to the operation. </param>
            <param name="shift">Input to the operation. </param>
            <param name="stride">Input to the operation. </param>
            <param name="drop_remainder">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WorkerHeartbeat(Emgu.TF.Output,System.String)">
            <summary>
            WorkerHeartbeat
            </summary>
            <param name="request">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] response(type: DtString).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WrapDatasetVariant(Emgu.TF.Output,System.String)">
            <summary>
            WrapDatasetVariant
            </summary>
            <param name="input_handle">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] output_handle(type: DtVariant).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.WriteAudioSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            WriteAudioSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="sample_rate">Input to the operation. </param>
            <param name="max_outputs">max outputs</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteFile(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            WriteFile
            </summary>
            <param name="filename">Input to the operation. </param>
            <param name="contents">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteGraphSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            WriteGraphSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteHistogramSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            WriteHistogramSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="values">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteImageSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.Int64,System.String)">
            <summary>
            WriteImageSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="bad_color">Input to the operation. </param>
            <param name="max_images">max images</param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteRawProtoSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            WriteRawProtoSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteScalarSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            WriteScalarSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="value">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.WriteSummary(Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            WriteSummary
            </summary>
            <param name="writer">Input to the operation. </param>
            <param name="step">Input to the operation. </param>
            <param name="tensor">Input to the operation. </param>
            <param name="tag">Input to the operation. </param>
            <param name="summary_metadata">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
        </member>
        <member name="M:Emgu.TF.Graph.Xdivy(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Xdivy
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Xlogy(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Xlogy
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="y">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ZerosLike(Emgu.TF.Output,System.String)">
            <summary>
            ZerosLike
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] y(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.Zeta(Emgu.TF.Output,Emgu.TF.Output,System.String)">
            <summary>
            Zeta
            </summary>
            <param name="x">Input to the operation. </param>
            <param name="q">Input to the operation. </param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] z(type: DtInvalid).
            </return>
        </member>
        <member name="M:Emgu.TF.Graph.ZipDataset(Emgu.TF.Output,Emgu.TF.DataType[],System.Int64[][],System.String)">
            <summary>
            ZipDataset
            </summary>
            <param name="input_datasets">Input to the operation. </param>
            <param name="output_types">output types</param>
            <param name="output_shapes">output shapes</param>
            <param name="opName">The name of the operation</param>
            <return>
            [0] handle(type: DtVariant).
            </return>
        </member>
        <member name="T:Emgu.TF.ImportGraphDefOptions">
            <summary>
            ImportGraphDefOptions holds options that can be passed to Graph.ImportGraphDef
            </summary>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.#ctor">
            <summary>
            Create an empty GraphDefOptions
            </summary>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.DisposeObject">
            <summary>
            Release all the memory associated with this GraphDefOptions
            </summary>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.SetPrefix(System.String)">
            <summary>
            Set the prefix to be prepended to the names of nodes in `graph_def` that will
            be imported into `graph`.
            </summary>
            <param name="prefix">The node prefix</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.AddInputMapping(System.String,System.Int32,Emgu.TF.Output)">
            <summary>
            Set any imported nodes with input <paramref name="srcName"/>:<paramref name="srcIndex"/> to have that input
            replaced with <paramref name="dst"/>.
            </summary>
            <param name="srcName">Refers to a node in the graph to be imported</param>
            <param name="srcIndex">The source node index.</param>
            <param name="dst">References a node already existing in the graph being imported into</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.RemapControlDependency(System.String,Emgu.TF.Operation)">
            <summary>
            Set any imported nodes with control input <paramref name="srcName"/> to have that input
            replaced with <paramref name="dst"/>
            </summary>
            <param name="srcName">Refers to a node in the graph to be imported</param>
            <param name="dst">References an operation already existing in the graph being imported into</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.AddControlDependency(Emgu.TF.Operation)">
            <summary>
            Cause the imported graph to have a control dependency on <paramref name="oper"/>
            </summary>
            <param name="oper">The opration that the graph will have a control dependecy on. Should exist in the graph being imported into.</param>
        </member>
        <member name="M:Emgu.TF.ImportGraphDefOptions.AddReturnOutput(System.String,System.Int32)">
            <summary>
            Add an output in graph_def to be returned via the `return_outputs` output
            parameter. If the output is remapped via an input
            mapping, the corresponding existing tensor in graph will be returned.
            </summary>
            <param name="operName">The name of the operation</param>
            <param name="index">The index</param>
        </member>
        <member name="P:Emgu.TF.ImportGraphDefOptions.NumReturnOutputs">
            <summary>
            Get the number of return outputs
            </summary>
        </member>
        <member name="T:Emgu.TF.Input">
            <summary>
            Represents a specific input of an operation.
            </summary>
        </member>
        <member name="F:Emgu.TF.Input.Operation">
            <summary>
            The Operation
            </summary>
        </member>
        <member name="F:Emgu.TF.Input.Index">
            <summary>
            The index of the input within the operation
            </summary>
        </member>
        <member name="M:Emgu.TF.Input.#ctor(Emgu.TF.Operation,System.Int32)">
            <summary>
            Create an input by specifying the operation and index.
            </summary>
            <param name="operation">The operation</param>
            <param name="index">The index of the input within the operation</param>
        </member>
        <member name="P:Emgu.TF.Input.InputType">
            <summary>
            Get the input type of the specific input index
            </summary>
            <returns>The input type of the specific input index</returns>
        </member>
        <member name="T:Emgu.TF.Library">
            <summary>
            The Library that can be used to load new Tensorflow modules.
            </summary>
        </member>
        <member name="M:Emgu.TF.Library.#ctor(System.String,Emgu.TF.Status)">
            <summary>
            Load the library specified by libraryFilename and register the ops and
            kernels present in that library.
            </summary>
            <param name="libraryFilename">The library file name</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Library.GetOpList">
            <summary>
            Get the OpList of OpDefs defined in the library
            </summary>
            <returns>Returns a Buffer. The memory pointed to by the result is owned by
            lib_handle. The data in the buffer will be the serialized OpList proto for
            ops defined in the library.
            </returns>
        </member>
        <member name="M:Emgu.TF.Library.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this Library.
            </summary>
        </member>
        <member name="T:Emgu.TF.Operation">
            <summary>
            Tensorflow operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Empty">
            <summary>
            Return true if the operation is empty
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Ptr">
            <summary>
            Get the unmanaged pointer to the Operation
            </summary>
        </member>
        <member name="M:Emgu.TF.Operation.op_Implicit(Emgu.TF.Operation)~System.IntPtr">
            <summary>
            Implicit operator for IntPtr
            </summary>
            <param name="obj">The Operation</param>
            <returns>The Operation pointer for this object</returns>
        </member>
        <member name="M:Emgu.TF.Operation.op_Implicit(Emgu.TF.Operation)~Emgu.TF.Output">
            <summary>
            Implicit operator for Output
            </summary>
            <param name="obj">The operation</param>
            <returns>The first output of this operation</returns>
        </member>
        <member name="P:Emgu.TF.Operation.Name">
            <summary>
            Get the name of the operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.OpType">
            <summary>
            Get the operation type
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Device">
            <summary>
            Get the name of the device this operation runs on
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumOutputs">
            <summary>
            Get the number of outputs for this operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumInputs">
            <summary>
            Get the number of inputs for this operation
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Inputs">
            <summary>
            Get the inputs
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.Outputs">
            <summary>
            Get the outputs
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumControlInputs">
            <summary>
            Get the number of control inputs
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.ControlInputs">
            <summary>
            Get list of all control inputs to an operation.
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.NumControlOutputs">
            <summary>
            Get the number of control outputs.
            </summary>
        </member>
        <member name="P:Emgu.TF.Operation.ControlOutputs">
            <summary>
            Get the list of operations that have the current operation as a control input.
            </summary>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrMetadata(System.String,Emgu.TF.Status)">
            <summary>
            Get the metadata of the attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The attribute meta data</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrBool(System.String,Emgu.TF.Status)">
            <summary>
            Get the bool value of the attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The bool value of the attribute</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrShape(System.String,Emgu.TF.Status)">
            <summary>
            Get the shape value of the attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The shape</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrType(System.String,Emgu.TF.Status)">
            <summary>
            Get the attribute type
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The type of the attribute</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrTensorShapeProto(System.String,Emgu.TF.Status)">
            <summary>
            Get the tensor shape proto value of the attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The buffer that contains the TensorShapeProto </returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrValueProto(System.String,Emgu.TF.Status)">
            <summary>
            Get the protobuf value of the attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The attribute</param>
            <returns>The buffer that contains the protobuf value</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrTensor(System.String,Emgu.TF.Status)">
            <summary>
            Get the value of the attribute that is a Tensor
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The Tensor value of the attribute</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrString(System.String,Emgu.TF.Status)">
            <summary>
            Get the value of the attribute that is a String
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>The string value of the attribute</returns>
        </member>
        <member name="M:Emgu.TF.Operation.GetAttrIntList(System.String,Emgu.TF.Status)">
            <summary>
            Get the value of the attribute that is a list of Int64
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="status">The status</param>
            <returns>A list ofInt64</returns>
        </member>
        <member name="T:Emgu.TF.OperationDescription">
            <summary>
            Operation being built. The underlying graph must outlive this
            </summary>
        </member>
        <member name="M:Emgu.TF.OperationDescription.FinishOperation(Emgu.TF.Status)">
            <summary>
            If this function succeeds:
            status is set to an OK value,
            an Operation is added to the graph,
            a non-null value pointing to the added operation is returned
            -- this value is valid until the underlying graph is deleted.
            Otherwise:
            status is set to a non-OK value,
            the graph is not modified,
            a null value is returned.
            In either case, it deletes the OperationDescription.
            </summary>
            <param name="status">The status</param>
            <returns>If success, the Operation that is added to the graph, otherwise null.</returns>
        </member>
        <member name="M:Emgu.TF.OperationDescription.AddInput(Emgu.TF.Output)">
            <summary>
            Add the input to this operation description
            </summary>
            <param name="input">The input to the operation</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.AddInput(Emgu.TF.Output[])">
            <summary>
            Add the inputs to this operation description
            </summary>
            <param name="inputs">The inputs to the operation</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Int64)">
            <summary>
            Set a long value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Int64[])">
            <summary>
            Set an array of long value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Boolean)">
            <summary>
            Set a boolean value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Boolean[])">
            <summary>
            Set an array of boolean value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Single)">
            <summary>
            Set a floating point value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.Single[])">
            <summary>
            Set an array of floating point value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.String)">
            <summary>
            Set a string value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,System.String[])">
            <summary>
            Set a string value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,Emgu.TF.DataType)">
            <summary>
            Set a DataType value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="type">The type</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,Emgu.TF.DataType[])">
            <summary>
            Set an array of DataType value as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="types">The types</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttrShape(System.String,System.Int64[])">
            <summary>
            Set a shape as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="shape">The shape</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttrShapeList(System.String,System.Int64[][])">
            <summary>
            Set a shape list as an attribute
            </summary>
            <param name="attrName">The attribute name</param>
            <param name="shapes">The shapes</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetAttr(System.String,Emgu.TF.Tensor,Emgu.TF.Status)">
            <summary>
            Set a Tensor as an attribute
            </summary>
            <param name="attrName">The name of the attribute</param>
            <param name="tensor">The Tensor</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.SetDevice(System.String)">
            <summary>
            Specify the device
            </summary>
            <param name="device">The device name</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.AddControlInput(Emgu.TF.Operation)">
            <summary>
            Call once per control input to this Operation description
            </summary>
            <param name="input">The control input</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.ColocateWith(Emgu.TF.Operation)">
            <summary>
            Request this operation be co-located on the device where <paramref name="op"/>
            is placed.
            </summary>
            <param name="op">The other operation</param>
        </member>
        <member name="M:Emgu.TF.OperationDescription.DisposeObject">
            <summary>
            Release all the unmanaged data associated with this OperationDescription
            </summary>
        </member>
        <member name="T:Emgu.TF.Output">
            <summary>
            Represents a specific output of an operation.
            </summary>
        </member>
        <member name="F:Emgu.TF.Output.Operation">
            <summary>
            The Operation
            </summary>
        </member>
        <member name="F:Emgu.TF.Output.Index">
            <summary>
            The index of the input within the operation
            </summary>
        </member>
        <member name="M:Emgu.TF.Output.#ctor(Emgu.TF.Operation,System.Int32)">
            <summary>
            Create an output by specifying the operation and index.
            </summary>
            <param name="operation">The Operation</param>
            <param name="index">The index of the input within the operation</param>
        </member>
        <member name="P:Emgu.TF.Output.OutputType">
            <summary>
            Get the output type
            </summary>
        </member>
        <member name="P:Emgu.TF.Output.NumConsumers">
            <summary>
            Get the number of comsumers
            </summary>
        </member>
        <member name="P:Emgu.TF.Output.Consumers">
            <summary>
            Get the consumers for this Output
            </summary>
        </member>
        <member name="T:Emgu.TF.Session">
            <summary>
            API for driving Graph execution
            </summary>
        </member>
        <member name="M:Emgu.TF.Session.#ctor(Emgu.TF.Graph,Emgu.TF.SessionOptions,Emgu.TF.Status)">
            <summary>
            Return a new execution session with the associated graph.
            </summary>
            <param name="graph">Graph must be a valid graph (not deleted or null).  This function will
            prevent the graph from being deleted until Session is deleted.
            Does not take ownership of opts.
            </param>
            <param name="sessionOptions">The session options</param>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Session.Close(Emgu.TF.Status)">
            <summary>
            Close a session.
            Contacts any other processes associated with the session, if applicable.
            </summary>
            <param name="status">The status</param>
        </member>
        <member name="M:Emgu.TF.Session.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this Session.
            </summary>
        </member>
        <member name="M:Emgu.TF.Session.Run(Emgu.TF.Output[],Emgu.TF.Tensor[],Emgu.TF.Output[],Emgu.TF.Operation[],Emgu.TF.Buffer,Emgu.TF.Buffer,Emgu.TF.Status)">
            <summary>
            Run the graph associated with the session starting with the supplied inputs
            (inputs[0,ninputs-1] with corresponding values in input_values[0,ninputs-1]).
            </summary>
            <param name="inputs">The input nodes</param>
            <param name="inputValues">The input values</param>
            <param name="outputs">The output nodes</param>
            <param name="targetOperations">Optional target operations</param>
            <param name="runOptions"></param>
            May be NULL, in which case it will be ignored; or
            non-NULL, in which case it must point to a `TF_Buffer` containing the
            serialized representation of a `RunOptions` protocol buffer.
            <param name="runMetadata">
            May be NULL, in which case it will be ignored; or
            non-NULL, in which case it must point to an empty, freshly allocated
            `TF_Buffer` that may be updated to contain the serialized representation
            of a `RunMetadata` protocol buffer.
            </param>
            <param name="status">The status</param>
            <returns>On success, the tensors corresponding to outputs[0,noutputs-1] are placed in the returned Tensors.</returns>
        </member>
        <member name="M:Emgu.TF.Session.ListDevices(Emgu.TF.Status)">
            <summary>
            Lists all devices in a session
            </summary>
            <param name="status">The status</param>
            <returns>All devices in the current session</returns>
        </member>
        <member name="T:Emgu.TF.Session.Device">
            <summary>
            The device for a session.
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.Name">
            <summary>
            The name of the device
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.Type">
            <summary>
            The type of the device
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.MemoryBytes">
            <summary>
            The amount of memory associated with a given device, in bytes.
            </summary>
        </member>
        <member name="P:Emgu.TF.Session.Device.MemoryGB">
            <summary>
            The amount of memory associated with a given device, in GB.
            </summary>
        </member>
        <member name="T:Emgu.TF.SessionOptions">
            <summary>
            Tensorflow session options
            </summary>
        </member>
        <member name="M:Emgu.TF.SessionOptions.#ctor">
            <summary>
            Construct a new session options
            </summary>
        </member>
        <member name="M:Emgu.TF.SessionOptions.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this session options.
            </summary>
        </member>
        <member name="M:Emgu.TF.SessionOptions.SetTarget(System.String)">
            <summary>
            Set the target in TF_SessionOptions.options.
            </summary>
            <param name="target">
            target can be empty, a single entry, or a comma separated list of entries.
            Each entry is in one of the following formats :
            "local"
            ip:port
            host:port
            </param>
        </member>
        <member name="M:Emgu.TF.SessionOptions.SetConfig(System.Byte[],Emgu.TF.Status)">
            <summary>
            Set the config in TF_SessionOptions.options.
            If config was not parsed successfully as a ConfigProto, record the
            error information in <paramref name="status"/>.
            </summary>
            <param name="proto">Config should be a serialized tensorflow.ConfigProto proto.</param>
            <param name="status">The status</param>
        </member>
        <member name="T:Emgu.TF.Status">
            <summary>
            The status
            </summary>
        </member>
        <member name="T:Emgu.TF.Status.Code">
            <summary>
            The status code
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Ok">
            <summary>
            Ok
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Cancelled">
            <summary>
            Canceled
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unknown">
            <summary>
            Unknown
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.InvalidArgument">
            <summary>
            Invalid argument
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.DeadlineExceeded">
            <summary>
            Deadline exceed
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.NotFound">
            <summary>
            Not found
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.AlreadyExists">
            <summary>
            Already exists
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.PermissionDenied">
            <summary>
            Permission denied
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unauthenticated">
            <summary>
            Unauthenticated
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.ResourceExhausted">
            <summary>
            Resource exhausted
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.FailedPrecondition">
            <summary>
            Failed precondition
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Aborted">
            <summary>
            Aborted
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.OutOfRange">
            <summary>
            Out of range
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unimplemented">
            <summary>
            Unimplemented
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Internal">
            <summary>
            Internal
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.Unavailable">
            <summary>
            Unavailable
            </summary>
        </member>
        <member name="F:Emgu.TF.Status.Code.DataLoss">
            <summary>
            Data loss
            </summary>
        </member>
        <member name="M:Emgu.TF.Status.#ctor">
            <summary>
            Create a new Status
            </summary>
        </member>
        <member name="P:Emgu.TF.Status.Message">
            <summary>
            Get the message from the status
            </summary>
        </member>
        <member name="P:Emgu.TF.Status.StatusCode">
            <summary>
            Get the status code
            </summary>
        </member>
        <member name="P:Emgu.TF.Status.Ptr">
            <summary>
            Get the pointer to the native status
            </summary>
        </member>
        <member name="M:Emgu.TF.Status.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this status
            </summary>
        </member>
        <member name="T:Emgu.TF.StatusChecker">
            <summary>
            A status checker, during the disposal, it will throw exception if the status is not ok.
            </summary>
        </member>
        <member name="M:Emgu.TF.StatusChecker.#ctor(Emgu.TF.Status)">
            <summary>
            Create a status checker
            </summary>
            <param name="status">The status to be check, if null, one will be created</param>
        </member>
        <member name="P:Emgu.TF.StatusChecker.Status">
            <summary>
            Get the status that this status checker is monitoring
            </summary>
        </member>
        <member name="M:Emgu.TF.StatusChecker.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this StatusChecker.
            </summary>
        </member>
        <member name="T:Emgu.TF.DataType">
            <summary>
            The tensor flow datatype.
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Float">
            <summary>
            Float
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Double">
            <summary>
            Double
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int32">
            <summary>
            Int32 tensors are always in 'host' memory.
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint8">
            <summary>
            Uint8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int16">
            <summary>
            Int16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int8">
            <summary>
            Int8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.String">
            <summary>
            String
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Complex64">
            <summary>
            Single-precision complex
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Complex">
            <summary>
            Old identifier kept for API backwards compatibility
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Int64">
            <summary>
            Int64
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Bool">
            <summary>
            Boolean
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Qint8">
            <summary>
            Quantized int8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Quint8">
            <summary>
            Quantized uint8
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Qint32">
            <summary>
            Quantized int32
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Bfloat16">
            <summary>
            Float32 truncated to 16 bits.  Only for cast ops.
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Qint16">
            <summary>
            Quantized int16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Quint16">
            <summary>
            Quantized uint16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint16">
            <summary>
            Uint16
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Complex128">
            <summary>
            Double-precision complex
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Half">
            <summary>
            Half
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Resource">
            <summary>
            Resource
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Variant">
            <summary>
            Variant
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint32">
            <summary>
            Uint32
            </summary>
        </member>
        <member name="F:Emgu.TF.DataType.Uint64">
            <summary>
            Uint64
            </summary>
        </member>
        <member name="T:Emgu.TF.Tensor">
             <summary>
             Tensor holds a multi-dimensional array of elements of a single data type.
             For all types other than STRING, the data buffer stores elements
             in row major order.  E.g. if data is treated as a vector of TF_DataType:
            
               element 0:   index (0, ..., 0)
               element 1:   index (0, ..., 1)
               ...
            
             The format for TF_STRING tensors is:
               start_offset: array[uint64]
               data:         byte[...]
            
               The string length (as a varint), followed by the contents of the string
               is encoded at data[start_offset[i]]]. StringEncode and StringDecode
               facilitate this encoding.
             </summary>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(Emgu.TF.DataType,System.Int32)">
            <summary>
            Create a single element tensor
            </summary>
            <param name="dataType">The Type of the Tensor</param>
            <param name="sizeInBytes">The size in bytes</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(Emgu.TF.DataType,System.Int32[])">
            <summary>
            Allocate a new tensor. The caller must set the Tensor values by writing them to the DataPointer
            with length ByteSize.
            </summary>
            <param name="dataType">The type of data</param>
            <param name="dims">The size for each of the dimension of the tensor</param>
        </member>
        <member name="M:Emgu.TF.Tensor.FromString(System.Byte[],Emgu.TF.Status)">
            <summary>
            Convert a byte array to a Tensor
            </summary>
            <param name="value">The byte array</param>
            <param name="status">Optional status</param>
            <returns>The tensor</returns>
        </member>
        <member name="M:Emgu.TF.Tensor.DecodeString(Emgu.TF.Status)">
            <summary>
            Decode a string encoded
            </summary>
            <param name="status">The status</param>
            <returns>The decoded string.</returns>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int16)">
            <summary>
            Create a Tensor that consist of a single int16 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int32)">
            <summary>
            Create a Tensor that consist of a single int value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int64)">
            <summary>
            Create a Tensor that consist of a single int64 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Single)">
            <summary>
            Create a Tensor that consist of a single float value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Double)">
            <summary>
            Create a Tensor that consist of a single float value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Int32[])">
            <summary>
            Create a Tensor that consist of an array of int value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Single[])">
            <summary>
            Create a Tensor that consist of an array of float value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.Double[])">
            <summary>
            Create a Tensor that consist of an array of double value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.UInt16[])">
            <summary>
            Create a Tensor that consist of an array of UInt16 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.UInt32[])">
            <summary>
            Create a Tensor that consist of an array of UInt32 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.#ctor(System.UInt64[])">
            <summary>
            Create a Tensor that consist of an array of UInt64 value
            </summary>
            <param name="value">The value</param>
        </member>
        <member name="M:Emgu.TF.Tensor.DisposeObject">
            <summary>
            Release the unmanaged memory associated with this tensor
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.DataPointer">
            <summary>
            Get the native pointer to the tensor data
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.ByteSize">
            <summary>
            Return the size of the underlying data in bytes.
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.Dim">
            <summary>
            Return the dimension of the tensor
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.JaggedData">
            <summary>
            Get the tensor data as a jagged array
            </summary>
        </member>
        <member name="P:Emgu.TF.Tensor.Data">
            <summary>
            Get the tensor data as a managed array
            </summary>
        </member>
        <member name="M:Emgu.TF.Tensor.Flat``1">
            <summary>
            Get the tensor data as a flatten single dimension array
            </summary>
            <typeparam name="T">The type of the data array</typeparam>
            <returns>The tensor data as a flatten single dimension array</returns>
        </member>
        <member name="M:Emgu.TF.Tensor.GetData(System.Boolean)">
            <summary>
            Get a copy of the tensor data as a managed array
            </summary>
            <param name="jagged">If true, return a jagged array, otherwise, a flatten single dimension array</param>
            <returns>A copy of the tensor data as a managed array</returns>
        </member>
        <member name="P:Emgu.TF.Tensor.Type">
            <summary>
            Get the type of data from this tensor
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.DisposableObject">
            <summary>
            An abstract class that wrap around a disposable object
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.DisposableObject._disposed">
            <summary> Track whether Dispose has been called. </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.Dispose">
            <summary>
            The dispose function that implements IDisposable interface
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.Dispose(System.Boolean)">
            <summary> 
             Dispose(bool disposing) executes in two distinct scenarios.
             If disposing equals true, the method has been called directly
             or indirectly by a user's code. Managed and unmanaged resources
             can be disposed.
             If disposing equals false, the method has been called by the
             runtime from inside the finalizer and you should not reference
             other objects. Only unmanaged resources can be disposed.
            </summary>
             <param name="disposing">
             If disposing equals false, the method has been called by the
             runtime from inside the finalizer and you should not reference
             other objects. Only unmanaged resources can be disposed.
             </param>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.ReleaseManagedResources">
            <summary>
            Release the managed resources. This function will be called during the disposal of the current object.
            override ride this function if you need to call the Dispose() function on any managed IDisposable object created by the current object
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.DisposeObject">
            <summary>
            Release the unmanaged resources
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.DisposableObject.Finalize">
            <summary>
            Destructor
            </summary>
        </member>
        <member name="T:Emgu.TF.Util.Toolbox">
            <summary>
            utilities functions for Emgu
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.LoadLibrary(System.String)">
            <summary>
            Maps the specified executable module into the address space of the calling process.
            </summary>
            <param name="dllname">The name of the dll</param>
            <returns>The handle to the library</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.FreeLibrary(System.IntPtr)">
            <summary>
            Decrements the reference count of the loaded dynamic-link library (DLL). When the reference count reaches zero, the module is unmapped from the address space of the calling process and the handle is no longer valid
            </summary>
            <param name="handle">The handle to the library</param>
            <returns>If the function succeeds, the return value is true. If the function fails, the return value is false.</returns>
        </member>
        <member name="M:Emgu.TF.Util.Toolbox.SetDllDirectory(System.String)">
            <summary>
            Adds a directory to the search path used to locate DLLs for the application
            </summary>
            <param name="path">The directory to be searched for DLLs</param>
            <returns>True if success</returns>
        </member>
        <member name="T:Emgu.TF.Util.UnmanagedObject">
            <summary>
            An Unmanaged Object is a disposable object with a Ptr property pointing to the unmanaged object
            </summary>
        </member>
        <member name="F:Emgu.TF.Util.UnmanagedObject._ptr">
            <summary>
            A pointer to the unmanaged object
            </summary>
        </member>
        <member name="P:Emgu.TF.Util.UnmanagedObject.Ptr">
            <summary>
            Pointer to the unmanaged object
            </summary>
        </member>
        <member name="M:Emgu.TF.Util.UnmanagedObject.op_Implicit(Emgu.TF.Util.UnmanagedObject)~System.IntPtr">
            <summary>
            Implicit operator for IntPtr
            </summary>
            <param name="obj">The UnmanagedObject</param>
            <returns>The unmanaged pointer for this object</returns>
        </member>
    </members>
</doc>
